// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module generic_accel_compute_Pipeline_VITIS_LOOP_187_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_ins_opcode_3_04,
        m_ins_opcode_2_03,
        m_ins_opcode_1_02,
        m_ins_opcode_0_01,
        m_ins_r1_V_3_0167,
        m_ins_r1_V_2_0166,
        m_ins_r1_V_1_0165,
        m_ins_r1_V_0_0164,
        m_ins_r0_V_3_0163,
        m_ins_r0_V_2_0162,
        m_ins_r0_V_1_0161,
        m_ins_r0_V_0_0160,
        m_ins_r_dst_V_3_0159,
        m_ins_r_dst_V_2_0158,
        m_ins_r_dst_V_1_0157,
        m_ins_r_dst_V_0_0156,
        tmp_488,
        pgml_address0,
        pgml_ce0,
        pgml_q0,
        pgml_address1,
        pgml_ce1,
        pgml_q1,
        pgml_address2,
        pgml_ce2,
        pgml_q2,
        pgml_address3,
        pgml_ce3,
        pgml_q3,
        shl_ln,
        op_assign_3_out,
        op_assign_3_out_ap_vld,
        op_assign_2_out,
        op_assign_2_out_ap_vld,
        op_assign_1_out,
        op_assign_1_out_ap_vld,
        op_assign_out,
        op_assign_out_ap_vld,
        m_ins_r1_V_3_1_out,
        m_ins_r1_V_3_1_out_ap_vld,
        m_ins_r1_V_2_1_out,
        m_ins_r1_V_2_1_out_ap_vld,
        m_ins_r1_V_1_1_out,
        m_ins_r1_V_1_1_out_ap_vld,
        m_ins_r1_V_0_1_out,
        m_ins_r1_V_0_1_out_ap_vld,
        m_ins_r0_V_3_1_out,
        m_ins_r0_V_3_1_out_ap_vld,
        m_ins_r0_V_2_1_out,
        m_ins_r0_V_2_1_out_ap_vld,
        m_ins_r0_V_1_1_out,
        m_ins_r0_V_1_1_out_ap_vld,
        m_ins_r0_V_0_1_out,
        m_ins_r0_V_0_1_out_ap_vld,
        m_ins_r_dst_V_3_1_out,
        m_ins_r_dst_V_3_1_out_ap_vld,
        m_ins_r_dst_V_2_1_out,
        m_ins_r_dst_V_2_1_out_ap_vld,
        m_ins_r_dst_V_1_1_out,
        m_ins_r_dst_V_1_1_out_ap_vld,
        m_ins_r_dst_V_0_1_out,
        m_ins_r_dst_V_0_1_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] m_ins_opcode_3_04;
input  [7:0] m_ins_opcode_2_03;
input  [7:0] m_ins_opcode_1_02;
input  [7:0] m_ins_opcode_0_01;
input  [4:0] m_ins_r1_V_3_0167;
input  [4:0] m_ins_r1_V_2_0166;
input  [4:0] m_ins_r1_V_1_0165;
input  [4:0] m_ins_r1_V_0_0164;
input  [4:0] m_ins_r0_V_3_0163;
input  [4:0] m_ins_r0_V_2_0162;
input  [4:0] m_ins_r0_V_1_0161;
input  [4:0] m_ins_r0_V_0_0160;
input  [4:0] m_ins_r_dst_V_3_0159;
input  [4:0] m_ins_r_dst_V_2_0158;
input  [4:0] m_ins_r_dst_V_1_0157;
input  [4:0] m_ins_r_dst_V_0_0156;
input  [5:0] tmp_488;
output  [9:0] pgml_address0;
output   pgml_ce0;
input  [7:0] pgml_q0;
output  [9:0] pgml_address1;
output   pgml_ce1;
input  [7:0] pgml_q1;
output  [9:0] pgml_address2;
output   pgml_ce2;
input  [7:0] pgml_q2;
output  [9:0] pgml_address3;
output   pgml_ce3;
input  [7:0] pgml_q3;
input  [9:0] shl_ln;
output  [7:0] op_assign_3_out;
output   op_assign_3_out_ap_vld;
output  [7:0] op_assign_2_out;
output   op_assign_2_out_ap_vld;
output  [7:0] op_assign_1_out;
output   op_assign_1_out_ap_vld;
output  [7:0] op_assign_out;
output   op_assign_out_ap_vld;
output  [4:0] m_ins_r1_V_3_1_out;
output   m_ins_r1_V_3_1_out_ap_vld;
output  [4:0] m_ins_r1_V_2_1_out;
output   m_ins_r1_V_2_1_out_ap_vld;
output  [4:0] m_ins_r1_V_1_1_out;
output   m_ins_r1_V_1_1_out_ap_vld;
output  [4:0] m_ins_r1_V_0_1_out;
output   m_ins_r1_V_0_1_out_ap_vld;
output  [4:0] m_ins_r0_V_3_1_out;
output   m_ins_r0_V_3_1_out_ap_vld;
output  [4:0] m_ins_r0_V_2_1_out;
output   m_ins_r0_V_2_1_out_ap_vld;
output  [4:0] m_ins_r0_V_1_1_out;
output   m_ins_r0_V_1_1_out_ap_vld;
output  [4:0] m_ins_r0_V_0_1_out;
output   m_ins_r0_V_0_1_out_ap_vld;
output  [4:0] m_ins_r_dst_V_3_1_out;
output   m_ins_r_dst_V_3_1_out_ap_vld;
output  [4:0] m_ins_r_dst_V_2_1_out;
output   m_ins_r_dst_V_2_1_out_ap_vld;
output  [4:0] m_ins_r_dst_V_1_1_out;
output   m_ins_r_dst_V_1_1_out_ap_vld;
output  [4:0] m_ins_r_dst_V_0_1_out;
output   m_ins_r_dst_V_0_1_out_ap_vld;

reg ap_idle;
reg pgml_ce0;
reg pgml_ce1;
reg pgml_ce2;
reg pgml_ce3;
reg op_assign_3_out_ap_vld;
reg op_assign_2_out_ap_vld;
reg op_assign_1_out_ap_vld;
reg op_assign_out_ap_vld;
reg m_ins_r1_V_3_1_out_ap_vld;
reg m_ins_r1_V_2_1_out_ap_vld;
reg m_ins_r1_V_1_1_out_ap_vld;
reg m_ins_r1_V_0_1_out_ap_vld;
reg m_ins_r0_V_3_1_out_ap_vld;
reg m_ins_r0_V_2_1_out_ap_vld;
reg m_ins_r0_V_1_1_out_ap_vld;
reg m_ins_r0_V_0_1_out_ap_vld;
reg m_ins_r_dst_V_3_1_out_ap_vld;
reg m_ins_r_dst_V_2_1_out_ap_vld;
reg m_ins_r_dst_V_1_1_out_ap_vld;
reg m_ins_r_dst_V_0_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln187_fu_560_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [1:0] trunc_ln188_fu_594_p1;
reg   [1:0] trunc_ln188_reg_965;
wire   [63:0] zext_ln541_fu_589_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln189_fu_612_p1;
wire   [63:0] zext_ln190_fu_631_p1;
wire   [63:0] zext_ln191_fu_650_p1;
reg   [2:0] idx_fu_126;
wire   [2:0] add_ln187_fu_566_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_idx_5;
reg   [4:0] i_fu_130;
wire   [4:0] add_ln192_fu_658_p2;
reg   [4:0] ap_sig_allocacmp_i_load;
reg   [4:0] ap_sig_allocacmp_i_load_1;
reg   [4:0] m_ins_r_dst_V_1_fu_134;
wire   [4:0] m_ins_r_dst_V_1_5_fu_694_p1;
reg   [4:0] m_ins_r_dst_V_1_1_fu_138;
reg   [4:0] m_ins_r_dst_V_1_2_fu_142;
reg   [4:0] m_ins_r_dst_V_1_3_fu_146;
reg   [4:0] m_ins_r0_V_1_fu_150;
wire   [4:0] m_ins_r0_V_1_5_fu_718_p1;
reg   [4:0] m_ins_r0_V_1_1_fu_154;
reg   [4:0] m_ins_r0_V_1_2_fu_158;
reg   [4:0] m_ins_r0_V_1_3_fu_162;
reg   [4:0] m_ins_r1_V_1_fu_166;
wire   [4:0] m_ins_r1_V_1_5_fu_742_p1;
reg   [4:0] m_ins_r1_V_1_1_fu_170;
reg   [4:0] m_ins_r1_V_1_2_fu_174;
reg   [4:0] m_ins_r1_V_1_3_fu_178;
reg   [7:0] m_ins_opcode_1_fu_182;
reg   [7:0] m_ins_opcode_1_1_fu_186;
reg   [7:0] m_ins_opcode_1_2_fu_190;
reg   [7:0] m_ins_opcode_1_3_fu_194;
wire    ap_block_pp0_stage0_01001;
wire   [9:0] i_cast_fu_579_p1;
wire   [9:0] add_ln541_fu_583_p2;
wire   [3:0] empty_44_fu_575_p1;
wire   [3:0] or_ln189_fu_598_p2;
wire   [9:0] add_ln_fu_604_p3;
wire   [3:0] or_ln190_fu_617_p2;
wire   [9:0] add_ln1_fu_623_p3;
wire   [3:0] or_ln191_fu_636_p2;
wire   [9:0] add_ln2_fu_642_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

generic_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln187_fu_560_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_130 <= add_ln192_fu_658_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_130 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln187_fu_560_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            idx_fu_126 <= add_ln187_fu_566_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            idx_fu_126 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            m_ins_opcode_1_1_fu_186 <= m_ins_opcode_1_02;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln188_reg_965 == 2'd1))) begin
            m_ins_opcode_1_1_fu_186 <= pgml_q3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            m_ins_opcode_1_2_fu_190 <= m_ins_opcode_2_03;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln188_reg_965 == 2'd2))) begin
            m_ins_opcode_1_2_fu_190 <= pgml_q3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            m_ins_opcode_1_3_fu_194 <= m_ins_opcode_3_04;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln188_reg_965 == 2'd3))) begin
            m_ins_opcode_1_3_fu_194 <= pgml_q3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            m_ins_opcode_1_fu_182 <= m_ins_opcode_0_01;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln188_reg_965 == 2'd0))) begin
            m_ins_opcode_1_fu_182 <= pgml_q3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            m_ins_r0_V_1_1_fu_154 <= m_ins_r0_V_1_0161;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln188_reg_965 == 2'd1))) begin
            m_ins_r0_V_1_1_fu_154 <= m_ins_r0_V_1_5_fu_718_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            m_ins_r0_V_1_2_fu_158 <= m_ins_r0_V_2_0162;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln188_reg_965 == 2'd2))) begin
            m_ins_r0_V_1_2_fu_158 <= m_ins_r0_V_1_5_fu_718_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            m_ins_r0_V_1_3_fu_162 <= m_ins_r0_V_3_0163;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln188_reg_965 == 2'd3))) begin
            m_ins_r0_V_1_3_fu_162 <= m_ins_r0_V_1_5_fu_718_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            m_ins_r0_V_1_fu_150 <= m_ins_r0_V_0_0160;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln188_reg_965 == 2'd0))) begin
            m_ins_r0_V_1_fu_150 <= m_ins_r0_V_1_5_fu_718_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            m_ins_r1_V_1_1_fu_170 <= m_ins_r1_V_1_0165;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln188_reg_965 == 2'd1))) begin
            m_ins_r1_V_1_1_fu_170 <= m_ins_r1_V_1_5_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            m_ins_r1_V_1_2_fu_174 <= m_ins_r1_V_2_0166;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln188_reg_965 == 2'd2))) begin
            m_ins_r1_V_1_2_fu_174 <= m_ins_r1_V_1_5_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            m_ins_r1_V_1_3_fu_178 <= m_ins_r1_V_3_0167;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln188_reg_965 == 2'd3))) begin
            m_ins_r1_V_1_3_fu_178 <= m_ins_r1_V_1_5_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            m_ins_r1_V_1_fu_166 <= m_ins_r1_V_0_0164;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln188_reg_965 == 2'd0))) begin
            m_ins_r1_V_1_fu_166 <= m_ins_r1_V_1_5_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            m_ins_r_dst_V_1_1_fu_138 <= m_ins_r_dst_V_1_0157;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln188_reg_965 == 2'd1))) begin
            m_ins_r_dst_V_1_1_fu_138 <= m_ins_r_dst_V_1_5_fu_694_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            m_ins_r_dst_V_1_2_fu_142 <= m_ins_r_dst_V_2_0158;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln188_reg_965 == 2'd2))) begin
            m_ins_r_dst_V_1_2_fu_142 <= m_ins_r_dst_V_1_5_fu_694_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            m_ins_r_dst_V_1_3_fu_146 <= m_ins_r_dst_V_3_0159;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln188_reg_965 == 2'd3))) begin
            m_ins_r_dst_V_1_3_fu_146 <= m_ins_r_dst_V_1_5_fu_694_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            m_ins_r_dst_V_1_fu_134 <= m_ins_r_dst_V_0_0156;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln188_reg_965 == 2'd0))) begin
            m_ins_r_dst_V_1_fu_134 <= m_ins_r_dst_V_1_5_fu_694_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln187_fu_560_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln188_reg_965 <= trunc_ln188_fu_594_p1;
    end
end

always @ (*) begin
    if (((icmp_ln187_fu_560_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 5'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_130;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_load_1 = i_fu_130;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_idx_5 = 3'd0;
    end else begin
        ap_sig_allocacmp_idx_5 = idx_fu_126;
    end
end

always @ (*) begin
    if (((icmp_ln187_fu_560_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_ins_r0_V_0_1_out_ap_vld = 1'b1;
    end else begin
        m_ins_r0_V_0_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln187_fu_560_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_ins_r0_V_1_1_out_ap_vld = 1'b1;
    end else begin
        m_ins_r0_V_1_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln187_fu_560_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_ins_r0_V_2_1_out_ap_vld = 1'b1;
    end else begin
        m_ins_r0_V_2_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln187_fu_560_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_ins_r0_V_3_1_out_ap_vld = 1'b1;
    end else begin
        m_ins_r0_V_3_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln187_fu_560_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_ins_r1_V_0_1_out_ap_vld = 1'b1;
    end else begin
        m_ins_r1_V_0_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln187_fu_560_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_ins_r1_V_1_1_out_ap_vld = 1'b1;
    end else begin
        m_ins_r1_V_1_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln187_fu_560_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_ins_r1_V_2_1_out_ap_vld = 1'b1;
    end else begin
        m_ins_r1_V_2_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln187_fu_560_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_ins_r1_V_3_1_out_ap_vld = 1'b1;
    end else begin
        m_ins_r1_V_3_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln187_fu_560_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_ins_r_dst_V_0_1_out_ap_vld = 1'b1;
    end else begin
        m_ins_r_dst_V_0_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln187_fu_560_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_ins_r_dst_V_1_1_out_ap_vld = 1'b1;
    end else begin
        m_ins_r_dst_V_1_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln187_fu_560_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_ins_r_dst_V_2_1_out_ap_vld = 1'b1;
    end else begin
        m_ins_r_dst_V_2_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln187_fu_560_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_ins_r_dst_V_3_1_out_ap_vld = 1'b1;
    end else begin
        m_ins_r_dst_V_3_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln187_fu_560_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        op_assign_1_out_ap_vld = 1'b1;
    end else begin
        op_assign_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln187_fu_560_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        op_assign_2_out_ap_vld = 1'b1;
    end else begin
        op_assign_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln187_fu_560_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        op_assign_3_out_ap_vld = 1'b1;
    end else begin
        op_assign_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln187_fu_560_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        op_assign_out_ap_vld = 1'b1;
    end else begin
        op_assign_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pgml_ce0 = 1'b1;
    end else begin
        pgml_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pgml_ce1 = 1'b1;
    end else begin
        pgml_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pgml_ce2 = 1'b1;
    end else begin
        pgml_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pgml_ce3 = 1'b1;
    end else begin
        pgml_ce3 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln187_fu_566_p2 = (ap_sig_allocacmp_idx_5 + 3'd1);

assign add_ln192_fu_658_p2 = (ap_sig_allocacmp_i_load_1 + 5'd4);

assign add_ln1_fu_623_p3 = {{tmp_488}, {or_ln190_fu_617_p2}};

assign add_ln2_fu_642_p3 = {{tmp_488}, {or_ln191_fu_636_p2}};

assign add_ln541_fu_583_p2 = (i_cast_fu_579_p1 + shl_ln);

assign add_ln_fu_604_p3 = {{tmp_488}, {or_ln189_fu_598_p2}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_44_fu_575_p1 = ap_sig_allocacmp_i_load[3:0];

assign i_cast_fu_579_p1 = ap_sig_allocacmp_i_load;

assign icmp_ln187_fu_560_p2 = ((ap_sig_allocacmp_idx_5 == 3'd4) ? 1'b1 : 1'b0);

assign m_ins_r0_V_0_1_out = m_ins_r0_V_1_fu_150;

assign m_ins_r0_V_1_1_out = m_ins_r0_V_1_1_fu_154;

assign m_ins_r0_V_1_5_fu_718_p1 = pgml_q1[4:0];

assign m_ins_r0_V_2_1_out = m_ins_r0_V_1_2_fu_158;

assign m_ins_r0_V_3_1_out = m_ins_r0_V_1_3_fu_162;

assign m_ins_r1_V_0_1_out = m_ins_r1_V_1_fu_166;

assign m_ins_r1_V_1_1_out = m_ins_r1_V_1_1_fu_170;

assign m_ins_r1_V_1_5_fu_742_p1 = pgml_q0[4:0];

assign m_ins_r1_V_2_1_out = m_ins_r1_V_1_2_fu_174;

assign m_ins_r1_V_3_1_out = m_ins_r1_V_1_3_fu_178;

assign m_ins_r_dst_V_0_1_out = m_ins_r_dst_V_1_fu_134;

assign m_ins_r_dst_V_1_1_out = m_ins_r_dst_V_1_1_fu_138;

assign m_ins_r_dst_V_1_5_fu_694_p1 = pgml_q2[4:0];

assign m_ins_r_dst_V_2_1_out = m_ins_r_dst_V_1_2_fu_142;

assign m_ins_r_dst_V_3_1_out = m_ins_r_dst_V_1_3_fu_146;

assign op_assign_1_out = m_ins_opcode_1_1_fu_186;

assign op_assign_2_out = m_ins_opcode_1_2_fu_190;

assign op_assign_3_out = m_ins_opcode_1_3_fu_194;

assign op_assign_out = m_ins_opcode_1_fu_182;

assign or_ln189_fu_598_p2 = (empty_44_fu_575_p1 | 4'd1);

assign or_ln190_fu_617_p2 = (empty_44_fu_575_p1 | 4'd2);

assign or_ln191_fu_636_p2 = (empty_44_fu_575_p1 | 4'd3);

assign pgml_address0 = zext_ln191_fu_650_p1;

assign pgml_address1 = zext_ln190_fu_631_p1;

assign pgml_address2 = zext_ln189_fu_612_p1;

assign pgml_address3 = zext_ln541_fu_589_p1;

assign trunc_ln188_fu_594_p1 = ap_sig_allocacmp_idx_5[1:0];

assign zext_ln189_fu_612_p1 = add_ln_fu_604_p3;

assign zext_ln190_fu_631_p1 = add_ln1_fu_623_p3;

assign zext_ln191_fu_650_p1 = add_ln2_fu_642_p3;

assign zext_ln541_fu_589_p1 = add_ln541_fu_583_p2;

endmodule //generic_accel_compute_Pipeline_VITIS_LOOP_187_2
