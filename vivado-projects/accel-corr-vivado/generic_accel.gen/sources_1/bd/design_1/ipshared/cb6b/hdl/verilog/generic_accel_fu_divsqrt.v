// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module generic_accel_fu_divsqrt (
        ap_clk,
        ap_rst,
        op,
        p_read,
        ld0,
        ld1,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [7:0] op;
input  [15:0] p_read;
input  [15:0] ld0;
input  [15:0] ld1;
output  [15:0] ap_return;
input   ap_ce;

reg[15:0] ap_return;

wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] op_read_reg_96;
reg   [7:0] op_read_reg_96_pp0_iter1_reg;
reg   [7:0] op_read_reg_96_pp0_iter2_reg;
reg   [7:0] op_read_reg_96_pp0_iter3_reg;
wire   [15:0] grp_fu_74_p2;
reg   [15:0] ap_phi_mux_phi_ln205_phi_fu_59_p6;
wire   [15:0] ap_phi_reg_pp0_iter0_phi_ln205_reg_56;
reg   [15:0] ap_phi_reg_pp0_iter1_phi_ln205_reg_56;
reg   [15:0] ap_phi_reg_pp0_iter2_phi_ln205_reg_56;
reg   [15:0] ap_phi_reg_pp0_iter3_phi_ln205_reg_56;
reg   [15:0] ap_phi_reg_pp0_iter4_phi_ln205_reg_56;
wire   [15:0] grp_fu_67_p2;
wire    ap_block_pp0_stage0;
reg    grp_fu_67_ce;
reg    grp_fu_74_ce;
reg    ap_ce_reg;
reg   [7:0] op_int_reg;
reg   [15:0] p_read_int_reg;
reg   [15:0] ld0_int_reg;
reg   [15:0] ld1_int_reg;
reg   [15:0] ap_return_int_reg;
reg    ap_condition_79;
wire   [15:0] grp_fu_74_p0;

generic_accel_hdiv_16ns_16ns_16_5_no_dsp_0 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hdiv_16ns_16ns_16_5_no_dsp_0_U172(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ld0_int_reg),
    .din1(ld1_int_reg),
    .ce(grp_fu_67_ce),
    .dout(grp_fu_67_p2)
);

generic_accel_hsqrt_16ns_16_4_no_dsp_0 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hsqrt_16ns_16_4_no_dsp_0_U173(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ld0_int_reg),
    .ce(grp_fu_74_ce),
    .dout(grp_fu_74_p2)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        if ((1'b1 == ap_condition_79)) begin
            ap_phi_reg_pp0_iter1_phi_ln205_reg_56 <= p_read_int_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_phi_ln205_reg_56 <= ap_phi_reg_pp0_iter0_phi_ln205_reg_56;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        if (((op_read_reg_96_pp0_iter2_reg == 8'd20) | (op_read_reg_96_pp0_iter2_reg == 8'd21))) begin
            ap_phi_reg_pp0_iter4_phi_ln205_reg_56 <= grp_fu_74_p2;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter4_phi_ln205_reg_56 <= ap_phi_reg_pp0_iter3_phi_ln205_reg_56;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        ap_phi_reg_pp0_iter2_phi_ln205_reg_56 <= ap_phi_reg_pp0_iter1_phi_ln205_reg_56;
        ap_phi_reg_pp0_iter3_phi_ln205_reg_56 <= ap_phi_reg_pp0_iter2_phi_ln205_reg_56;
        op_read_reg_96 <= op_int_reg;
        op_read_reg_96_pp0_iter1_reg <= op_read_reg_96;
        op_read_reg_96_pp0_iter2_reg <= op_read_reg_96_pp0_iter1_reg;
        op_read_reg_96_pp0_iter3_reg <= op_read_reg_96_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= ap_phi_mux_phi_ln205_phi_fu_59_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        ld0_int_reg <= ld0;
        ld1_int_reg <= ld1;
        op_int_reg <= op;
        p_read_int_reg <= p_read;
    end
end

always @ (*) begin
    if (((op_read_reg_96_pp0_iter3_reg == 8'd24) | ((op_read_reg_96_pp0_iter3_reg == 8'd26) | (op_read_reg_96_pp0_iter3_reg == 8'd25)))) begin
        ap_phi_mux_phi_ln205_phi_fu_59_p6 = grp_fu_67_p2;
    end else begin
        ap_phi_mux_phi_ln205_phi_fu_59_p6 = ap_phi_reg_pp0_iter4_phi_ln205_reg_56;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = ap_phi_mux_phi_ln205_phi_fu_59_p6;
    end else begin
        ap_return = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_67_ce = 1'b1;
    end else begin
        grp_fu_67_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_74_ce = 1'b1;
    end else begin
        grp_fu_74_ce = 1'b0;
    end
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_79 = (~(op_int_reg == 8'd26) & ~(op_int_reg == 8'd25) & ~(op_int_reg == 8'd24) & ~(op_int_reg == 8'd21) & ~(op_int_reg == 8'd20));
end

assign ap_phi_reg_pp0_iter0_phi_ln205_reg_56 = 'bx;

endmodule //generic_accel_fu_divsqrt
