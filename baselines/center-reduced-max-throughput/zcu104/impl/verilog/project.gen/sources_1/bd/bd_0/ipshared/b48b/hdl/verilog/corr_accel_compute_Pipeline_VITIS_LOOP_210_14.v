// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module corr_accel_compute_Pipeline_VITIS_LOOP_210_14 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        reg_file_5_1_address0,
        reg_file_5_1_ce0,
        reg_file_5_1_we0,
        reg_file_5_1_d0,
        reg_file_5_1_address1,
        reg_file_5_1_ce1,
        reg_file_5_1_q1,
        reg_file_5_0_address0,
        reg_file_5_0_ce0,
        reg_file_5_0_we0,
        reg_file_5_0_d0,
        reg_file_5_0_address1,
        reg_file_5_0_ce1,
        reg_file_5_0_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] reg_file_5_1_address0;
output   reg_file_5_1_ce0;
output   reg_file_5_1_we0;
output  [15:0] reg_file_5_1_d0;
output  [10:0] reg_file_5_1_address1;
output   reg_file_5_1_ce1;
input  [15:0] reg_file_5_1_q1;
output  [10:0] reg_file_5_0_address0;
output   reg_file_5_0_ce0;
output   reg_file_5_0_we0;
output  [15:0] reg_file_5_0_d0;
output  [10:0] reg_file_5_0_address1;
output   reg_file_5_0_ce1;
input  [15:0] reg_file_5_0_q1;

reg ap_idle;
reg reg_file_5_1_ce0;
reg reg_file_5_1_we0;
reg reg_file_5_1_ce1;
reg reg_file_5_0_ce0;
reg reg_file_5_0_we0;
reg reg_file_5_0_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_fu_118_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [10:0] reg_file_5_0_addr_reg_258;
reg   [10:0] reg_file_5_0_addr_reg_258_pp0_iter1_reg;
reg   [10:0] reg_file_5_0_addr_reg_258_pp0_iter2_reg;
reg   [10:0] reg_file_5_0_addr_reg_258_pp0_iter3_reg;
reg   [10:0] reg_file_5_1_addr_reg_264;
reg   [10:0] reg_file_5_1_addr_reg_264_pp0_iter1_reg;
reg   [10:0] reg_file_5_1_addr_reg_264_pp0_iter2_reg;
reg   [10:0] reg_file_5_1_addr_reg_264_pp0_iter3_reg;
reg   [15:0] reg_file_5_0_load_reg_270;
reg   [15:0] reg_file_5_0_load_reg_270_pp0_iter2_reg;
reg   [15:0] reg_file_5_0_load_reg_270_pp0_iter3_reg;
reg   [15:0] reg_file_5_1_load_reg_276;
reg   [15:0] reg_file_5_1_load_reg_276_pp0_iter2_reg;
reg   [15:0] reg_file_5_1_load_reg_276_pp0_iter3_reg;
wire   [31:0] conv_fu_104_p1;
reg   [31:0] conv_reg_282;
wire   [31:0] conv_1_fu_107_p1;
reg   [31:0] conv_1_reg_288;
wire   [0:0] icmp_ln214_fu_170_p2;
reg   [0:0] icmp_ln214_reg_294;
wire   [0:0] icmp_ln214_1_fu_176_p2;
reg   [0:0] icmp_ln214_1_reg_299;
wire   [0:0] icmp_ln214_2_fu_199_p2;
reg   [0:0] icmp_ln214_2_reg_304;
wire   [0:0] icmp_ln214_3_fu_205_p2;
reg   [0:0] icmp_ln214_3_reg_309;
wire   [63:0] zext_ln214_fu_136_p1;
wire    ap_block_pp0_stage0;
reg   [6:0] j_fu_56;
wire   [6:0] add_ln210_fu_142_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_j_8;
wire   [4:0] lshr_ln_fu_126_p4;
wire   [31:0] bitcast_ln214_fu_153_p1;
wire   [7:0] tmp_5_fu_156_p4;
wire   [22:0] trunc_ln214_fu_166_p1;
wire   [31:0] bitcast_ln214_1_fu_182_p1;
wire   [7:0] tmp_7_fu_185_p4;
wire   [22:0] trunc_ln214_1_fu_195_p1;
wire   [0:0] or_ln214_fu_211_p2;
wire   [0:0] grp_fu_94_p2;
wire   [0:0] and_ln214_fu_215_p2;
wire   [0:0] or_ln214_1_fu_229_p2;
wire   [0:0] grp_fu_99_p2;
wire   [0:0] and_ln214_1_fu_233_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

corr_accel_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U80(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_reg_282),
    .din1(32'd1036831949),
    .ce(1'b1),
    .opcode(5'd5),
    .dout(grp_fu_94_p2)
);

corr_accel_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U81(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_1_reg_288),
    .din1(32'd1036831949),
    .ce(1'b1),
    .opcode(5'd5),
    .dout(grp_fu_99_p2)
);

corr_accel_hptosp_16ns_32_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
hptosp_16ns_32_1_no_dsp_1_U82(
    .din0(reg_file_5_0_load_reg_270),
    .dout(conv_fu_104_p1)
);

corr_accel_hptosp_16ns_32_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
hptosp_16ns_32_1_no_dsp_1_U83(
    .din0(reg_file_5_1_load_reg_276),
    .dout(conv_1_fu_107_p1)
);

corr_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((tmp_fu_118_p3 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_56 <= add_ln210_fu_142_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_56 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        reg_file_5_0_addr_reg_258_pp0_iter1_reg[4 : 0] <= reg_file_5_0_addr_reg_258[4 : 0];
        reg_file_5_1_addr_reg_264_pp0_iter1_reg[4 : 0] <= reg_file_5_1_addr_reg_264[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        conv_1_reg_288 <= conv_1_fu_107_p1;
        conv_reg_282 <= conv_fu_104_p1;
        icmp_ln214_1_reg_299 <= icmp_ln214_1_fu_176_p2;
        icmp_ln214_2_reg_304 <= icmp_ln214_2_fu_199_p2;
        icmp_ln214_3_reg_309 <= icmp_ln214_3_fu_205_p2;
        icmp_ln214_reg_294 <= icmp_ln214_fu_170_p2;
        reg_file_5_0_addr_reg_258_pp0_iter2_reg[4 : 0] <= reg_file_5_0_addr_reg_258_pp0_iter1_reg[4 : 0];
        reg_file_5_0_addr_reg_258_pp0_iter3_reg[4 : 0] <= reg_file_5_0_addr_reg_258_pp0_iter2_reg[4 : 0];
        reg_file_5_0_load_reg_270_pp0_iter2_reg <= reg_file_5_0_load_reg_270;
        reg_file_5_0_load_reg_270_pp0_iter3_reg <= reg_file_5_0_load_reg_270_pp0_iter2_reg;
        reg_file_5_1_addr_reg_264_pp0_iter2_reg[4 : 0] <= reg_file_5_1_addr_reg_264_pp0_iter1_reg[4 : 0];
        reg_file_5_1_addr_reg_264_pp0_iter3_reg[4 : 0] <= reg_file_5_1_addr_reg_264_pp0_iter2_reg[4 : 0];
        reg_file_5_1_load_reg_276_pp0_iter2_reg <= reg_file_5_1_load_reg_276;
        reg_file_5_1_load_reg_276_pp0_iter3_reg <= reg_file_5_1_load_reg_276_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_118_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reg_file_5_0_addr_reg_258[4 : 0] <= zext_ln214_fu_136_p1[4 : 0];
        reg_file_5_1_addr_reg_264[4 : 0] <= zext_ln214_fu_136_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reg_file_5_0_load_reg_270 <= reg_file_5_0_q1;
        reg_file_5_1_load_reg_276 <= reg_file_5_1_q1;
    end
end

always @ (*) begin
    if (((tmp_fu_118_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_8 = 7'd0;
    end else begin
        ap_sig_allocacmp_j_8 = j_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        reg_file_5_0_ce0 = 1'b1;
    end else begin
        reg_file_5_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reg_file_5_0_ce1 = 1'b1;
    end else begin
        reg_file_5_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        reg_file_5_0_we0 = 1'b1;
    end else begin
        reg_file_5_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        reg_file_5_1_ce0 = 1'b1;
    end else begin
        reg_file_5_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reg_file_5_1_ce1 = 1'b1;
    end else begin
        reg_file_5_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        reg_file_5_1_we0 = 1'b1;
    end else begin
        reg_file_5_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln210_fu_142_p2 = (ap_sig_allocacmp_j_8 + 7'd2);

assign and_ln214_1_fu_233_p2 = (or_ln214_1_fu_229_p2 & grp_fu_99_p2);

assign and_ln214_fu_215_p2 = (or_ln214_fu_211_p2 & grp_fu_94_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln214_1_fu_182_p1 = conv_1_reg_288;

assign bitcast_ln214_fu_153_p1 = conv_reg_282;

assign icmp_ln214_1_fu_176_p2 = ((trunc_ln214_fu_166_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln214_2_fu_199_p2 = ((tmp_7_fu_185_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln214_3_fu_205_p2 = ((trunc_ln214_1_fu_195_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln214_fu_170_p2 = ((tmp_5_fu_156_p4 != 8'd255) ? 1'b1 : 1'b0);

assign lshr_ln_fu_126_p4 = {{ap_sig_allocacmp_j_8[5:1]}};

assign or_ln214_1_fu_229_p2 = (icmp_ln214_3_reg_309 | icmp_ln214_2_reg_304);

assign or_ln214_fu_211_p2 = (icmp_ln214_reg_294 | icmp_ln214_1_reg_299);

assign reg_file_5_0_address0 = reg_file_5_0_addr_reg_258_pp0_iter3_reg;

assign reg_file_5_0_address1 = zext_ln214_fu_136_p1;

assign reg_file_5_0_d0 = ((and_ln214_fu_215_p2[0:0] == 1'b1) ? 16'd15360 : reg_file_5_0_load_reg_270_pp0_iter3_reg);

assign reg_file_5_1_address0 = reg_file_5_1_addr_reg_264_pp0_iter3_reg;

assign reg_file_5_1_address1 = zext_ln214_fu_136_p1;

assign reg_file_5_1_d0 = ((and_ln214_1_fu_233_p2[0:0] == 1'b1) ? 16'd15360 : reg_file_5_1_load_reg_276_pp0_iter3_reg);

assign tmp_5_fu_156_p4 = {{bitcast_ln214_fu_153_p1[30:23]}};

assign tmp_7_fu_185_p4 = {{bitcast_ln214_1_fu_182_p1[30:23]}};

assign tmp_fu_118_p3 = ap_sig_allocacmp_j_8[32'd6];

assign trunc_ln214_1_fu_195_p1 = bitcast_ln214_1_fu_182_p1[22:0];

assign trunc_ln214_fu_166_p1 = bitcast_ln214_fu_153_p1[22:0];

assign zext_ln214_fu_136_p1 = lshr_ln_fu_126_p4;

always @ (posedge ap_clk) begin
    reg_file_5_0_addr_reg_258[10:5] <= 6'b000000;
    reg_file_5_0_addr_reg_258_pp0_iter1_reg[10:5] <= 6'b000000;
    reg_file_5_0_addr_reg_258_pp0_iter2_reg[10:5] <= 6'b000000;
    reg_file_5_0_addr_reg_258_pp0_iter3_reg[10:5] <= 6'b000000;
    reg_file_5_1_addr_reg_264[10:5] <= 6'b000000;
    reg_file_5_1_addr_reg_264_pp0_iter1_reg[10:5] <= 6'b000000;
    reg_file_5_1_addr_reg_264_pp0_iter2_reg[10:5] <= 6'b000000;
    reg_file_5_1_addr_reg_264_pp0_iter3_reg[10:5] <= 6'b000000;
end

endmodule //corr_accel_compute_Pipeline_VITIS_LOOP_210_14
