-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity corr_accel_compute_Pipeline_VITIS_LOOP_274_22_VITIS_LOOP_275_23_VITIS_LOOP_276_24 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    reg_file_6_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_6_0_ce0 : OUT STD_LOGIC;
    reg_file_6_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    reg_file_6_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_6_1_ce0 : OUT STD_LOGIC;
    reg_file_6_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    reg_file_3_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_3_1_ce0 : OUT STD_LOGIC;
    reg_file_3_1_we0 : OUT STD_LOGIC;
    reg_file_3_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    reg_file_3_1_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_3_1_ce1 : OUT STD_LOGIC;
    reg_file_3_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    reg_file_3_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_3_0_ce0 : OUT STD_LOGIC;
    reg_file_3_0_we0 : OUT STD_LOGIC;
    reg_file_3_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    reg_file_3_0_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_3_0_ce1 : OUT STD_LOGIC;
    reg_file_3_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    reg_file_2_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_2_1_ce0 : OUT STD_LOGIC;
    reg_file_2_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    reg_file_2_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_2_0_ce0 : OUT STD_LOGIC;
    reg_file_2_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_284_p_din0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_284_p_din1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_284_p_dout0 : IN STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_284_p_ce : OUT STD_LOGIC;
    grp_fu_292_p_din0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_292_p_din1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_292_p_dout0 : IN STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_292_p_ce : OUT STD_LOGIC );
end;


architecture behav of corr_accel_compute_Pipeline_VITIS_LOOP_274_22_VITIS_LOOP_275_23_VITIS_LOOP_276_24 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv19_40000 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv14_1000 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln274_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal cmp250_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp250_reg_687 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal cmp250_reg_687_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln275_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln275_reg_696 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln275_reg_696_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln274_1_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln274_1_reg_701 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln274_1_reg_701_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_dup_fu_399_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_dup_reg_706 : STD_LOGIC_VECTOR (4 downto 0);
    signal cmp250_mid1_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp250_mid1_reg_711 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp250_mid1_reg_711_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln274_3_fu_439_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln274_3_reg_716 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln275_2_fu_461_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln275_2_reg_721 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln_fu_491_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal lshr_ln_reg_736 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln282_fu_501_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln282_reg_741 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln282_reg_741_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln282_reg_741_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln282_reg_741_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_file_3_0_addr_reg_757 : STD_LOGIC_VECTOR (10 downto 0);
    signal reg_file_3_0_addr_reg_757_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal reg_file_3_0_addr_reg_757_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal reg_file_3_1_addr_reg_763 : STD_LOGIC_VECTOR (10 downto 0);
    signal reg_file_3_1_addr_reg_763_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal reg_file_3_1_addr_reg_763_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_605_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_67_fu_615_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_fu_644_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_reg_779 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul2_reg_784 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln275_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln288_fu_541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_fu_599_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_98 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln276_fu_547_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_102 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln275_4_fu_483_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten50_fu_106 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln275_6_fu_559_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_fu_110 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln274_2_fu_385_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten93_fu_114 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln274_fu_308_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal empty_92_fu_286_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvars_iv99_udiv_fu_276_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln274_1_fu_331_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_96_fu_341_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_93_fu_298_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln274_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_mid_fu_345_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_fu_290_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln276_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln274_fu_323_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln275_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln275_fu_393_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_95_fu_337_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_266_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv99_udiv_mid1_fu_429_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_97_fu_457_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln274_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_mid1_fu_447_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln274_1_fu_365_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln275_3_fu_469_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln275_fu_415_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln274_4_fu_505_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_521_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln275_5_fu_513_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln9_fu_531_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln275_1_fu_553_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln8_fu_592_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln274_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln275_1_fu_629_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_fu_635_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_104 : BOOLEAN;
    signal ap_enable_state3_pp0_iter2_stage0 : BOOLEAN;
    signal ap_enable_operation_113 : BOOLEAN;
    signal ap_enable_state4_pp0_iter3_stage0 : BOOLEAN;
    signal ap_enable_operation_125 : BOOLEAN;
    signal ap_enable_state6_pp0_iter5_stage0 : BOOLEAN;
    signal ap_enable_operation_105 : BOOLEAN;
    signal ap_enable_operation_114 : BOOLEAN;
    signal ap_enable_operation_127 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component corr_accel_hadd_16ns_16ns_16_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component corr_accel_hmul_16ns_16ns_16_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component corr_accel_mux_21_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component corr_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_21_16_1_1_U111 : component corr_accel_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => reg_file_6_0_q0,
        din1 => reg_file_6_1_q0,
        din2 => select_ln275_2_reg_721,
        dout => tmp_s_fu_605_p4);

    mux_21_16_1_1_U112 : component corr_accel_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => reg_file_2_0_q0,
        din1 => reg_file_2_1_q0,
        din2 => trunc_ln282_reg_741,
        dout => tmp_67_fu_615_p4);

    mux_21_16_1_1_U113 : component corr_accel_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => reg_file_3_0_q1,
        din1 => reg_file_3_1_q1,
        din2 => trunc_ln282_reg_741_pp0_iter2_reg,
        dout => val_fu_635_p4);

    flow_control_loop_pipe_sequential_init_U : component corr_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    i_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_110 <= ap_const_lv7_0;
                elsif (((icmp_ln274_fu_302_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_110 <= select_ln274_2_fu_385_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten50_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten50_fu_106 <= ap_const_lv14_0;
                elsif (((icmp_ln274_fu_302_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten50_fu_106 <= select_ln275_6_fu_559_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten93_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten93_fu_114 <= ap_const_lv19_0;
                elsif (((icmp_ln274_fu_302_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten93_fu_114 <= add_ln274_fu_308_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_102 <= ap_const_lv7_0;
                elsif (((icmp_ln274_fu_302_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_102 <= select_ln275_4_fu_483_p3;
                end if;
            end if; 
        end if;
    end process;

    k_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_98 <= ap_const_lv7_0;
                elsif (((icmp_ln274_fu_302_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    k_fu_98 <= add_ln276_fu_547_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln274_fu_302_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln274_1_reg_701 <= and_ln274_1_fu_379_p2;
                cmp250_mid1_reg_711 <= cmp250_mid1_fu_423_p2;
                icmp_ln275_reg_696 <= icmp_ln275_fu_317_p2;
                lshr_ln_reg_736 <= select_ln275_fu_415_p3(5 downto 1);
                select_ln274_3_reg_716 <= select_ln274_3_fu_439_p3;
                select_ln275_2_reg_721 <= select_ln275_2_fu_461_p3;
                tmp_12_dup_reg_706 <= select_ln274_2_fu_385_p3(5 downto 1);
                trunc_ln282_reg_741 <= trunc_ln282_fu_501_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln274_1_reg_701_pp0_iter2_reg <= and_ln274_1_reg_701;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                cmp250_mid1_reg_711_pp0_iter2_reg <= cmp250_mid1_reg_711;
                cmp250_reg_687_pp0_iter2_reg <= cmp250_reg_687;
                icmp_ln275_reg_696_pp0_iter2_reg <= icmp_ln275_reg_696;
                mul2_reg_784 <= grp_fu_292_p_dout0;
                reg_file_3_0_addr_reg_757 <= zext_ln282_fu_599_p1(11 - 1 downto 0);
                reg_file_3_0_addr_reg_757_pp0_iter3_reg <= reg_file_3_0_addr_reg_757;
                reg_file_3_0_addr_reg_757_pp0_iter4_reg <= reg_file_3_0_addr_reg_757_pp0_iter3_reg;
                reg_file_3_1_addr_reg_763 <= zext_ln282_fu_599_p1(11 - 1 downto 0);
                reg_file_3_1_addr_reg_763_pp0_iter3_reg <= reg_file_3_1_addr_reg_763;
                reg_file_3_1_addr_reg_763_pp0_iter4_reg <= reg_file_3_1_addr_reg_763_pp0_iter3_reg;
                ret_reg_779 <= ret_fu_644_p3;
                trunc_ln282_reg_741_pp0_iter2_reg <= trunc_ln282_reg_741;
                trunc_ln282_reg_741_pp0_iter3_reg <= trunc_ln282_reg_741_pp0_iter2_reg;
                trunc_ln282_reg_741_pp0_iter4_reg <= trunc_ln282_reg_741_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                cmp250_reg_687 <= cmp250_fu_270_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln274_1_fu_331_p2 <= std_logic_vector(unsigned(i_fu_110) + unsigned(ap_const_lv7_1));
    add_ln274_fu_308_p2 <= std_logic_vector(unsigned(indvar_flatten93_fu_114) + unsigned(ap_const_lv19_1));
    add_ln275_1_fu_553_p2 <= std_logic_vector(unsigned(indvar_flatten50_fu_106) + unsigned(ap_const_lv14_1));
    add_ln275_fu_393_p2 <= std_logic_vector(unsigned(select_ln274_fu_323_p3) + unsigned(ap_const_lv7_1));
    add_ln276_fu_547_p2 <= std_logic_vector(unsigned(select_ln275_fu_415_p3) + unsigned(ap_const_lv7_1));
    add_ln8_fu_592_p4 <= ((tmp_12_dup_reg_706 & select_ln274_3_reg_716) & lshr_ln_reg_736);
    add_ln9_fu_531_p4 <= ((tmp_15_fu_521_p4 & select_ln275_5_fu_513_p3) & lshr_ln_fu_491_p4);
    and_ln274_1_fu_379_p2 <= (xor_ln274_fu_353_p2 and icmp_ln276_fu_373_p2);
    and_ln274_fu_359_p2 <= (xor_ln274_fu_353_p2 and empty_93_fu_298_p1);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln274_fu_302_p2)
    begin
        if (((icmp_ln274_fu_302_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

        ap_enable_operation_104 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_105 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_113 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_114 <= (ap_const_boolean_1 = ap_const_boolean_1);

    ap_enable_operation_125_assign_proc : process(trunc_ln282_reg_741_pp0_iter4_reg)
    begin
                ap_enable_operation_125 <= (trunc_ln282_reg_741_pp0_iter4_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_127_assign_proc : process(trunc_ln282_reg_741_pp0_iter4_reg)
    begin
                ap_enable_operation_127 <= (trunc_ln282_reg_741_pp0_iter4_reg = ap_const_lv1_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_enable_state3_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2)
    begin
                ap_enable_state3_pp0_iter2_stage0 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state4_pp0_iter3_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3)
    begin
                ap_enable_state4_pp0_iter3_stage0 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state6_pp0_iter5_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5)
    begin
                ap_enable_state6_pp0_iter5_stage0 <= ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    cmp250_fu_270_p2 <= "1" when (j_fu_102 = ap_const_lv7_0) else "0";
    cmp250_mid1_fu_423_p2 <= "1" when (add_ln275_fu_393_p2 = ap_const_lv7_0) else "0";
    empty_92_fu_286_p1 <= i_fu_110(6 - 1 downto 0);
    empty_93_fu_298_p1 <= j_fu_102(1 - 1 downto 0);
    empty_95_fu_337_p1 <= add_ln274_1_fu_331_p2(1 - 1 downto 0);
    empty_96_fu_341_p1 <= add_ln274_1_fu_331_p2(6 - 1 downto 0);
    empty_97_fu_457_p1 <= add_ln275_fu_393_p2(1 - 1 downto 0);
    empty_fu_266_p1 <= i_fu_110(1 - 1 downto 0);
    grp_fu_284_p_ce <= ap_const_logic_1;
    grp_fu_284_p_din0 <= ret_reg_779;
    grp_fu_284_p_din1 <= mul2_reg_784;
    grp_fu_292_p_ce <= ap_const_logic_1;
    grp_fu_292_p_din0 <= tmp_s_fu_605_p4;
    grp_fu_292_p_din1 <= tmp_67_fu_615_p4;
    icmp_ln274_fu_302_p2 <= "1" when (indvar_flatten93_fu_114 = ap_const_lv19_40000) else "0";
    icmp_ln275_fu_317_p2 <= "1" when (indvar_flatten50_fu_106 = ap_const_lv14_1000) else "0";
    icmp_ln276_fu_373_p2 <= "1" when (k_fu_98 = ap_const_lv7_40) else "0";
    indvars_iv99_udiv_fu_276_p4 <= j_fu_102(5 downto 1);
    indvars_iv99_udiv_mid1_fu_429_p4 <= add_ln275_fu_393_p2(5 downto 1);
    lshr_ln_fu_491_p4 <= select_ln275_fu_415_p3(5 downto 1);
    or_ln274_fu_625_p2 <= (icmp_ln275_reg_696_pp0_iter2_reg or cmp250_reg_687_pp0_iter2_reg);
    or_ln275_fu_409_p2 <= (icmp_ln275_fu_317_p2 or and_ln274_1_fu_379_p2);
    reg_file_2_0_address0 <= zext_ln288_fu_541_p1(11 - 1 downto 0);

    reg_file_2_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            reg_file_2_0_ce0 <= ap_const_logic_1;
        else 
            reg_file_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    reg_file_2_1_address0 <= zext_ln288_fu_541_p1(11 - 1 downto 0);

    reg_file_2_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            reg_file_2_1_ce0 <= ap_const_logic_1;
        else 
            reg_file_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    reg_file_3_0_address0 <= reg_file_3_0_addr_reg_757_pp0_iter4_reg;
    reg_file_3_0_address1 <= zext_ln282_fu_599_p1(11 - 1 downto 0);

    reg_file_3_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            reg_file_3_0_ce0 <= ap_const_logic_1;
        else 
            reg_file_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    reg_file_3_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            reg_file_3_0_ce1 <= ap_const_logic_1;
        else 
            reg_file_3_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    reg_file_3_0_d0 <= grp_fu_284_p_dout0;

    reg_file_3_0_we0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, trunc_ln282_reg_741_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (trunc_ln282_reg_741_pp0_iter4_reg = ap_const_lv1_0))) then 
            reg_file_3_0_we0 <= ap_const_logic_1;
        else 
            reg_file_3_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    reg_file_3_1_address0 <= reg_file_3_1_addr_reg_763_pp0_iter4_reg;
    reg_file_3_1_address1 <= zext_ln282_fu_599_p1(11 - 1 downto 0);

    reg_file_3_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            reg_file_3_1_ce0 <= ap_const_logic_1;
        else 
            reg_file_3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    reg_file_3_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            reg_file_3_1_ce1 <= ap_const_logic_1;
        else 
            reg_file_3_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    reg_file_3_1_d0 <= grp_fu_284_p_dout0;

    reg_file_3_1_we0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, trunc_ln282_reg_741_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (trunc_ln282_reg_741_pp0_iter4_reg = ap_const_lv1_1))) then 
            reg_file_3_1_we0 <= ap_const_logic_1;
        else 
            reg_file_3_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    reg_file_6_0_address0 <= zext_ln275_fu_477_p1(11 - 1 downto 0);

    reg_file_6_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            reg_file_6_0_ce0 <= ap_const_logic_1;
        else 
            reg_file_6_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    reg_file_6_1_address0 <= zext_ln275_fu_477_p1(11 - 1 downto 0);

    reg_file_6_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            reg_file_6_1_ce0 <= ap_const_logic_1;
        else 
            reg_file_6_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_fu_644_p3 <= 
        ap_const_lv16_0 when (select_ln275_1_fu_629_p3(0) = '1') else 
        val_fu_635_p4;
    select_ln274_1_fu_365_p3 <= 
        tmp_13_mid_fu_345_p3 when (icmp_ln275_fu_317_p2(0) = '1') else 
        tmp_13_fu_290_p3;
    select_ln274_2_fu_385_p3 <= 
        add_ln274_1_fu_331_p2 when (icmp_ln275_fu_317_p2(0) = '1') else 
        i_fu_110;
    select_ln274_3_fu_439_p3 <= 
        empty_95_fu_337_p1 when (icmp_ln275_fu_317_p2(0) = '1') else 
        empty_fu_266_p1;
    select_ln274_4_fu_505_p3 <= 
        ap_const_lv1_0 when (icmp_ln275_fu_317_p2(0) = '1') else 
        empty_93_fu_298_p1;
    select_ln274_fu_323_p3 <= 
        ap_const_lv7_0 when (icmp_ln275_fu_317_p2(0) = '1') else 
        j_fu_102;
    select_ln275_1_fu_629_p3 <= 
        cmp250_mid1_reg_711_pp0_iter2_reg when (and_ln274_1_reg_701_pp0_iter2_reg(0) = '1') else 
        or_ln274_fu_625_p2;
    select_ln275_2_fu_461_p3 <= 
        empty_97_fu_457_p1 when (and_ln274_1_fu_379_p2(0) = '1') else 
        and_ln274_fu_359_p2;
    select_ln275_3_fu_469_p3 <= 
        tmp_13_mid1_fu_447_p4 when (and_ln274_1_fu_379_p2(0) = '1') else 
        select_ln274_1_fu_365_p3;
    select_ln275_4_fu_483_p3 <= 
        add_ln275_fu_393_p2 when (and_ln274_1_fu_379_p2(0) = '1') else 
        select_ln274_fu_323_p3;
    select_ln275_5_fu_513_p3 <= 
        empty_97_fu_457_p1 when (and_ln274_1_fu_379_p2(0) = '1') else 
        select_ln274_4_fu_505_p3;
    select_ln275_6_fu_559_p3 <= 
        ap_const_lv14_1 when (icmp_ln275_fu_317_p2(0) = '1') else 
        add_ln275_1_fu_553_p2;
    select_ln275_fu_415_p3 <= 
        ap_const_lv7_0 when (or_ln275_fu_409_p2(0) = '1') else 
        k_fu_98;
    tmp_12_dup_fu_399_p4 <= select_ln274_2_fu_385_p3(5 downto 1);
    tmp_13_fu_290_p3 <= (empty_92_fu_286_p1 & indvars_iv99_udiv_fu_276_p4);
    tmp_13_mid1_fu_447_p4 <= ((tmp_12_dup_fu_399_p4 & select_ln274_3_fu_439_p3) & indvars_iv99_udiv_mid1_fu_429_p4);
    tmp_13_mid_fu_345_p3 <= (empty_96_fu_341_p1 & ap_const_lv5_0);
    tmp_15_fu_521_p4 <= select_ln275_4_fu_483_p3(5 downto 1);
    trunc_ln282_fu_501_p1 <= select_ln275_fu_415_p3(1 - 1 downto 0);
    xor_ln274_fu_353_p2 <= (icmp_ln275_fu_317_p2 xor ap_const_lv1_1);
    zext_ln275_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln275_3_fu_469_p3),64));
    zext_ln282_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln8_fu_592_p4),64));
    zext_ln288_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_fu_531_p4),64));
end behav;
