-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity corr_accel_compute is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    reg_file_2_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_2_0_ce0 : OUT STD_LOGIC;
    reg_file_2_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    reg_file_2_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_2_1_ce0 : OUT STD_LOGIC;
    reg_file_2_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    reg_file_6_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_6_0_ce0 : OUT STD_LOGIC;
    reg_file_6_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    reg_file_6_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_6_1_ce0 : OUT STD_LOGIC;
    reg_file_6_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    reg_file_7_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_7_0_ce0 : OUT STD_LOGIC;
    reg_file_7_0_we0 : OUT STD_LOGIC;
    reg_file_7_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    reg_file_7_0_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_7_0_ce1 : OUT STD_LOGIC;
    reg_file_7_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    reg_file_7_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_7_1_ce0 : OUT STD_LOGIC;
    reg_file_7_1_we0 : OUT STD_LOGIC;
    reg_file_7_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    reg_file_7_1_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_7_1_ce1 : OUT STD_LOGIC;
    reg_file_7_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of corr_accel_compute is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_reg_177 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal lshr_ln_fu_130_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal lshr_ln_reg_186 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln131_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln130_fu_151_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln130_reg_201 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln134_fu_155_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln134_reg_206 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_159_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_211 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_ap_start : STD_LOGIC;
    signal grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_ap_done : STD_LOGIC;
    signal grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_ap_idle : STD_LOGIC;
    signal grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_ap_ready : STD_LOGIC;
    signal grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_1_ce0 : STD_LOGIC;
    signal grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_1_we0 : STD_LOGIC;
    signal grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_1_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_1_ce1 : STD_LOGIC;
    signal grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_0_ce0 : STD_LOGIC;
    signal grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_0_we0 : STD_LOGIC;
    signal grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_0_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_0_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_0_ce1 : STD_LOGIC;
    signal grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_2_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_2_1_ce0 : STD_LOGIC;
    signal grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_2_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_2_0_ce0 : STD_LOGIC;
    signal grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln134_fu_140_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_64 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln131_fu_124_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_159_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component corr_accel_compute_Pipeline_VITIS_LOOP_135_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        zext_ln131 : IN STD_LOGIC_VECTOR (5 downto 0);
        reg_file_7_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        reg_file_7_1_ce0 : OUT STD_LOGIC;
        reg_file_7_1_we0 : OUT STD_LOGIC;
        reg_file_7_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        reg_file_7_1_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        reg_file_7_1_ce1 : OUT STD_LOGIC;
        reg_file_7_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        reg_file_7_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        reg_file_7_0_ce0 : OUT STD_LOGIC;
        reg_file_7_0_we0 : OUT STD_LOGIC;
        reg_file_7_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        reg_file_7_0_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        reg_file_7_0_ce1 : OUT STD_LOGIC;
        reg_file_7_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        reg_file_2_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        reg_file_2_1_ce0 : OUT STD_LOGIC;
        reg_file_2_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        reg_file_2_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        reg_file_2_0_ce0 : OUT STD_LOGIC;
        reg_file_2_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        lshr_ln : IN STD_LOGIC_VECTOR (4 downto 0);
        trunc_ln : IN STD_LOGIC_VECTOR (0 downto 0);
        tmp : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component corr_accel_mux_21_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94 : component corr_accel_compute_Pipeline_VITIS_LOOP_135_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_ap_start,
        ap_done => grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_ap_done,
        ap_idle => grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_ap_idle,
        ap_ready => grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_ap_ready,
        zext_ln131 => trunc_ln130_reg_201,
        reg_file_7_1_address0 => grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_1_address0,
        reg_file_7_1_ce0 => grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_1_ce0,
        reg_file_7_1_we0 => grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_1_we0,
        reg_file_7_1_d0 => grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_1_d0,
        reg_file_7_1_address1 => grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_1_address1,
        reg_file_7_1_ce1 => grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_1_ce1,
        reg_file_7_1_q1 => reg_file_7_1_q1,
        reg_file_7_0_address0 => grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_0_address0,
        reg_file_7_0_ce0 => grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_0_ce0,
        reg_file_7_0_we0 => grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_0_we0,
        reg_file_7_0_d0 => grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_0_d0,
        reg_file_7_0_address1 => grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_0_address1,
        reg_file_7_0_ce1 => grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_0_ce1,
        reg_file_7_0_q1 => reg_file_7_0_q1,
        reg_file_2_1_address0 => grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_2_1_address0,
        reg_file_2_1_ce0 => grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_2_1_ce0,
        reg_file_2_1_q0 => reg_file_2_1_q0,
        reg_file_2_0_address0 => grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_2_0_address0,
        reg_file_2_0_ce0 => grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_2_0_ce0,
        reg_file_2_0_q0 => reg_file_2_0_q0,
        lshr_ln => lshr_ln_reg_186,
        trunc_ln => trunc_ln134_reg_206,
        tmp => tmp_reg_211);

    mux_21_16_1_1_U52 : component corr_accel_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => reg_file_6_0_q0,
        din1 => reg_file_6_1_q0,
        din2 => tmp_fu_159_p3,
        dout => tmp_fu_159_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_ap_ready = ap_const_logic_1)) then 
                    grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_64 <= ap_const_lv7_0;
            elsif (((icmp_ln131_fu_118_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_64 <= add_ln131_fu_124_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_reg_177 <= i_fu_64;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln131_fu_118_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                lshr_ln_reg_186 <= i_fu_64(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_reg_211 <= tmp_fu_159_p4;
                trunc_ln130_reg_201 <= trunc_ln130_fu_151_p1;
                trunc_ln134_reg_206 <= trunc_ln134_fu_155_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln131_fu_118_p2, grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_ap_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln131_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln131_fu_124_p2 <= std_logic_vector(unsigned(i_fu_64) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_ap_done)
    begin
        if ((grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln131_fu_118_p2)
    begin
        if ((((icmp_ln131_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln131_fu_118_p2)
    begin
        if (((icmp_ln131_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_ap_start <= grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_ap_start_reg;
    icmp_ln131_fu_118_p2 <= "1" when (i_fu_64 = ap_const_lv7_40) else "0";
    lshr_ln_fu_130_p4 <= i_fu_64(5 downto 1);
    reg_file_2_0_address0 <= grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_2_0_address0;
    reg_file_2_0_ce0 <= grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_2_0_ce0;
    reg_file_2_1_address0 <= grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_2_1_address0;
    reg_file_2_1_ce0 <= grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_2_1_ce0;
    reg_file_6_0_address0 <= zext_ln134_fu_140_p1(11 - 1 downto 0);

    reg_file_6_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            reg_file_6_0_ce0 <= ap_const_logic_1;
        else 
            reg_file_6_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    reg_file_6_1_address0 <= zext_ln134_fu_140_p1(11 - 1 downto 0);

    reg_file_6_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            reg_file_6_1_ce0 <= ap_const_logic_1;
        else 
            reg_file_6_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    reg_file_7_0_address0 <= grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_0_address0;
    reg_file_7_0_address1 <= grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_0_address1;
    reg_file_7_0_ce0 <= grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_0_ce0;
    reg_file_7_0_ce1 <= grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_0_ce1;
    reg_file_7_0_d0 <= grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_0_d0;
    reg_file_7_0_we0 <= grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_0_we0;
    reg_file_7_1_address0 <= grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_1_address0;
    reg_file_7_1_address1 <= grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_1_address1;
    reg_file_7_1_ce0 <= grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_1_ce0;
    reg_file_7_1_ce1 <= grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_1_ce1;
    reg_file_7_1_d0 <= grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_1_d0;
    reg_file_7_1_we0 <= grp_compute_Pipeline_VITIS_LOOP_135_2_fu_94_reg_file_7_1_we0;
    tmp_fu_159_p3 <= j_reg_177(1 - 1 downto 0);
    trunc_ln130_fu_151_p1 <= j_reg_177(6 - 1 downto 0);
    trunc_ln134_fu_155_p1 <= j_reg_177(1 - 1 downto 0);
    zext_ln134_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_130_p4),64));
end behav;
