// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module corr_accel_compute_Pipeline_VITIS_LOOP_138_3_VITIS_LOOP_141_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln130,
        shl_ln,
        reg_file_2_0_address0,
        reg_file_2_0_ce0,
        reg_file_2_0_q0,
        reg_file_2_0_address1,
        reg_file_2_0_ce1,
        reg_file_2_0_q1,
        reg_file_2_1_address0,
        reg_file_2_1_ce0,
        reg_file_2_1_q0,
        reg_file_2_1_address1,
        reg_file_2_1_ce1,
        reg_file_2_1_q1,
        zext_ln145_2,
        reg_file_0_0_load,
        reg_file_4_1_address0,
        reg_file_4_1_ce0,
        reg_file_4_1_we0,
        reg_file_4_1_d0,
        reg_file_4_1_address1,
        reg_file_4_1_ce1,
        reg_file_4_1_q1,
        reg_file_4_0_address0,
        reg_file_4_0_ce0,
        reg_file_4_0_we0,
        reg_file_4_0_d0,
        reg_file_4_0_address1,
        reg_file_4_0_ce1,
        reg_file_4_0_q1,
        reg_file_3_1_address0,
        reg_file_3_1_ce0,
        reg_file_3_1_q0,
        reg_file_3_0_address0,
        reg_file_3_0_ce0,
        reg_file_3_0_q0,
        tmp_36
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] zext_ln130;
input  [10:0] shl_ln;
output  [10:0] reg_file_2_0_address0;
output   reg_file_2_0_ce0;
input  [15:0] reg_file_2_0_q0;
output  [10:0] reg_file_2_0_address1;
output   reg_file_2_0_ce1;
input  [15:0] reg_file_2_0_q1;
output  [10:0] reg_file_2_1_address0;
output   reg_file_2_1_ce0;
input  [15:0] reg_file_2_1_q0;
output  [10:0] reg_file_2_1_address1;
output   reg_file_2_1_ce1;
input  [15:0] reg_file_2_1_q1;
input  [12:0] zext_ln145_2;
input  [15:0] reg_file_0_0_load;
output  [10:0] reg_file_4_1_address0;
output   reg_file_4_1_ce0;
output   reg_file_4_1_we0;
output  [15:0] reg_file_4_1_d0;
output  [10:0] reg_file_4_1_address1;
output   reg_file_4_1_ce1;
input  [15:0] reg_file_4_1_q1;
output  [10:0] reg_file_4_0_address0;
output   reg_file_4_0_ce0;
output   reg_file_4_0_we0;
output  [15:0] reg_file_4_0_d0;
output  [10:0] reg_file_4_0_address1;
output   reg_file_4_0_ce1;
input  [15:0] reg_file_4_0_q1;
output  [10:0] reg_file_3_1_address0;
output   reg_file_3_1_ce0;
input  [15:0] reg_file_3_1_q0;
output  [10:0] reg_file_3_0_address0;
output   reg_file_3_0_ce0;
input  [15:0] reg_file_3_0_q0;
input  [5:0] tmp_36;

reg ap_idle;
reg reg_file_2_0_ce0;
reg reg_file_2_0_ce1;
reg reg_file_2_1_ce0;
reg reg_file_2_1_ce1;
reg reg_file_4_1_ce0;
reg reg_file_4_1_we0;
reg reg_file_4_1_ce1;
reg reg_file_4_0_ce0;
reg reg_file_4_0_we0;
reg reg_file_4_0_ce1;
reg reg_file_3_1_ce0;
reg reg_file_3_0_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln138_fu_300_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] trunc_ln140_fu_296_p1;
reg   [0:0] trunc_ln140_reg_517;
reg   [0:0] icmp_ln138_reg_532;
wire   [0:0] icmp_ln141_fu_314_p2;
reg   [0:0] icmp_ln141_reg_536;
wire   [0:0] trunc_ln140_2_fu_355_p1;
reg   [0:0] trunc_ln140_2_reg_541;
reg   [4:0] lshr_ln5_reg_556;
reg   [4:0] lshr_ln5_reg_556_pp0_iter2_reg;
reg   [4:0] lshr_ln5_reg_556_pp0_iter3_reg;
wire   [5:0] trunc_ln145_fu_377_p1;
reg   [5:0] trunc_ln145_reg_562;
reg   [5:0] trunc_ln145_reg_562_pp0_iter2_reg;
wire   [0:0] trunc_ln145_1_fu_381_p1;
reg   [0:0] trunc_ln145_1_reg_567;
reg   [0:0] trunc_ln145_1_reg_567_pp0_iter2_reg;
reg   [0:0] trunc_ln145_1_reg_567_pp0_iter3_reg;
reg   [0:0] trunc_ln145_1_reg_567_pp0_iter4_reg;
reg   [0:0] trunc_ln145_1_reg_567_pp0_iter5_reg;
reg   [0:0] trunc_ln145_1_reg_567_pp0_iter6_reg;
wire   [15:0] grp_fu_242_p2;
reg   [15:0] tmp_1_mid2_reg_578;
wire   [15:0] tmp_s_fu_444_p4;
reg   [10:0] reg_file_4_0_addr_reg_598;
reg   [10:0] reg_file_4_0_addr_reg_598_pp0_iter5_reg;
reg   [10:0] reg_file_4_0_addr_reg_598_pp0_iter6_reg;
reg   [10:0] reg_file_4_1_addr_reg_604;
reg   [10:0] reg_file_4_1_addr_reg_604_pp0_iter5_reg;
reg   [10:0] reg_file_4_1_addr_reg_604_pp0_iter6_reg;
wire   [15:0] grp_fu_246_p2;
reg   [15:0] mul_reg_610;
wire   [15:0] tmp_35_fu_466_p4;
reg   [15:0] tmp_35_reg_615;
reg    ap_condition_exit_pp0_iter2_stage0;
wire   [63:0] zext_ln140_fu_290_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln140_1_fu_349_p1;
wire   [63:0] zext_ln145_fu_438_p1;
wire   [63:0] zext_ln145_1_fu_460_p1;
reg   [6:0] j_4_fu_84;
wire   [6:0] add_ln141_fu_385_p2;
wire    ap_loop_init;
reg   [63:0] k_fu_88;
wire   [63:0] select_ln138_2_fu_359_p3;
wire   [63:0] zext_ln130_cast_fu_250_p1;
reg   [12:0] indvar_flatten_fu_92;
wire   [12:0] add_ln138_fu_305_p2;
wire   [15:0] grp_fu_236_p2;
wire   [15:0] grp_fu_242_p1;
wire   [10:0] trunc_ln140_1_fu_275_p4;
wire   [10:0] add_ln140_fu_285_p2;
wire   [63:0] add_ln138_1_fu_328_p2;
wire   [10:0] trunc_ln140_1_mid1_fu_334_p4;
wire   [10:0] add_ln140_1_fu_344_p2;
wire   [6:0] select_ln138_fu_320_p3;
wire   [15:0] tmp_mid1_fu_415_p4;
wire   [15:0] tmp_fu_406_p4;
wire   [10:0] add_ln1_fu_432_p3;
wire   [10:0] add_ln145_1_fu_454_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
reg    ap_block_pp0;
wire    ap_enable_operation_87;
reg    ap_enable_state5_pp0_iter4_stage0;
wire    ap_enable_operation_90;
reg    ap_enable_state6_pp0_iter5_stage0;
reg    ap_enable_operation_99;
reg    ap_enable_state8_pp0_iter7_stage0;
wire    ap_enable_operation_88;
wire    ap_enable_operation_91;
reg    ap_enable_operation_101;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_done_reg = 1'b0;
end

corr_accel_hadd_16ns_16ns_16_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hadd_16ns_16ns_16_2_full_dsp_1_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_35_reg_615),
    .din1(mul_reg_610),
    .ce(1'b1),
    .dout(grp_fu_236_p2)
);

corr_accel_hmul_16ns_16ns_16_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hmul_16ns_16ns_16_2_max_dsp_1_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_file_0_0_load),
    .din1(grp_fu_242_p1),
    .ce(1'b1),
    .dout(grp_fu_242_p2)
);

corr_accel_hmul_16ns_16ns_16_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hmul_16ns_16ns_16_2_max_dsp_1_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_mid2_reg_578),
    .din1(tmp_s_fu_444_p4),
    .ce(1'b1),
    .dout(grp_fu_246_p2)
);

corr_accel_mux_21_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 16 ))
mux_21_16_1_1_U43(
    .din0(reg_file_2_0_q1),
    .din1(reg_file_2_1_q1),
    .din2(trunc_ln140_reg_517),
    .dout(tmp_fu_406_p4)
);

corr_accel_mux_21_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 16 ))
mux_21_16_1_1_U44(
    .din0(reg_file_2_0_q0),
    .din1(reg_file_2_1_q0),
    .din2(trunc_ln140_2_reg_541),
    .dout(tmp_mid1_fu_415_p4)
);

corr_accel_mux_21_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 16 ))
mux_21_16_1_1_U45(
    .din0(reg_file_3_0_q0),
    .din1(reg_file_3_1_q0),
    .din2(trunc_ln145_1_reg_567_pp0_iter3_reg),
    .dout(tmp_s_fu_444_p4)
);

corr_accel_mux_21_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 16 ))
mux_21_16_1_1_U46(
    .din0(reg_file_4_0_q1),
    .din1(reg_file_4_1_q1),
    .din2(trunc_ln145_1_reg_567_pp0_iter4_reg),
    .dout(tmp_35_fu_466_p4)
);

corr_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_92 <= 13'd0;
        end else if (((icmp_ln138_fu_300_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_92 <= add_ln138_fu_305_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_4_fu_84 <= 7'd0;
        end else if (((icmp_ln138_fu_300_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_4_fu_84 <= add_ln141_fu_385_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            k_fu_88 <= zext_ln130_cast_fu_250_p1;
        end else if (((icmp_ln138_fu_300_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            k_fu_88 <= select_ln138_2_fu_359_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln138_reg_532 <= icmp_ln138_fu_300_p2;
        trunc_ln140_reg_517 <= trunc_ln140_fu_296_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        lshr_ln5_reg_556_pp0_iter2_reg <= lshr_ln5_reg_556;
        lshr_ln5_reg_556_pp0_iter3_reg <= lshr_ln5_reg_556_pp0_iter2_reg;
        mul_reg_610 <= grp_fu_246_p2;
        reg_file_4_0_addr_reg_598 <= zext_ln145_1_fu_460_p1;
        reg_file_4_0_addr_reg_598_pp0_iter5_reg <= reg_file_4_0_addr_reg_598;
        reg_file_4_0_addr_reg_598_pp0_iter6_reg <= reg_file_4_0_addr_reg_598_pp0_iter5_reg;
        reg_file_4_1_addr_reg_604 <= zext_ln145_1_fu_460_p1;
        reg_file_4_1_addr_reg_604_pp0_iter5_reg <= reg_file_4_1_addr_reg_604;
        reg_file_4_1_addr_reg_604_pp0_iter6_reg <= reg_file_4_1_addr_reg_604_pp0_iter5_reg;
        tmp_1_mid2_reg_578 <= grp_fu_242_p2;
        tmp_35_reg_615 <= tmp_35_fu_466_p4;
        trunc_ln145_1_reg_567_pp0_iter2_reg <= trunc_ln145_1_reg_567;
        trunc_ln145_1_reg_567_pp0_iter3_reg <= trunc_ln145_1_reg_567_pp0_iter2_reg;
        trunc_ln145_1_reg_567_pp0_iter4_reg <= trunc_ln145_1_reg_567_pp0_iter3_reg;
        trunc_ln145_1_reg_567_pp0_iter5_reg <= trunc_ln145_1_reg_567_pp0_iter4_reg;
        trunc_ln145_1_reg_567_pp0_iter6_reg <= trunc_ln145_1_reg_567_pp0_iter5_reg;
        trunc_ln145_reg_562_pp0_iter2_reg <= trunc_ln145_reg_562;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln138_fu_300_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln141_reg_536 <= icmp_ln141_fu_314_p2;
        lshr_ln5_reg_556 <= {{select_ln138_fu_320_p3[5:1]}};
        trunc_ln140_2_reg_541 <= trunc_ln140_2_fu_355_p1;
        trunc_ln145_1_reg_567 <= trunc_ln145_1_fu_381_p1;
        trunc_ln145_reg_562 <= trunc_ln145_fu_377_p1;
    end
end

always @ (*) begin
    if (((icmp_ln138_fu_300_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln138_reg_532 == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reg_file_2_0_ce0 = 1'b1;
    end else begin
        reg_file_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reg_file_2_0_ce1 = 1'b1;
    end else begin
        reg_file_2_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reg_file_2_1_ce0 = 1'b1;
    end else begin
        reg_file_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reg_file_2_1_ce1 = 1'b1;
    end else begin
        reg_file_2_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        reg_file_3_0_ce0 = 1'b1;
    end else begin
        reg_file_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        reg_file_3_1_ce0 = 1'b1;
    end else begin
        reg_file_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        reg_file_4_0_ce0 = 1'b1;
    end else begin
        reg_file_4_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        reg_file_4_0_ce1 = 1'b1;
    end else begin
        reg_file_4_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (trunc_ln145_1_reg_567_pp0_iter6_reg == 1'd0))) begin
        reg_file_4_0_we0 = 1'b1;
    end else begin
        reg_file_4_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        reg_file_4_1_ce0 = 1'b1;
    end else begin
        reg_file_4_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        reg_file_4_1_ce1 = 1'b1;
    end else begin
        reg_file_4_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (trunc_ln145_1_reg_567_pp0_iter6_reg == 1'd1))) begin
        reg_file_4_1_we0 = 1'b1;
    end else begin
        reg_file_4_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln138_1_fu_328_p2 = (k_fu_88 + 64'd1);

assign add_ln138_fu_305_p2 = (indvar_flatten_fu_92 + 13'd1);

assign add_ln140_1_fu_344_p2 = (trunc_ln140_1_mid1_fu_334_p4 + shl_ln);

assign add_ln140_fu_285_p2 = (trunc_ln140_1_fu_275_p4 + shl_ln);

assign add_ln141_fu_385_p2 = (select_ln138_fu_320_p3 + 7'd1);

assign add_ln145_1_fu_454_p3 = {{tmp_36}, {lshr_ln5_reg_556_pp0_iter3_reg}};

assign add_ln1_fu_432_p3 = {{trunc_ln145_reg_562_pp0_iter2_reg}, {lshr_ln5_reg_556_pp0_iter2_reg}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_101 = (trunc_ln145_1_reg_567_pp0_iter6_reg == 1'd1);
end

assign ap_enable_operation_87 = (1'b1 == 1'b1);

assign ap_enable_operation_88 = (1'b1 == 1'b1);

assign ap_enable_operation_90 = (1'b1 == 1'b1);

assign ap_enable_operation_91 = (1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_99 = (trunc_ln145_1_reg_567_pp0_iter6_reg == 1'd0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

always @ (*) begin
    ap_enable_state5_pp0_iter4_stage0 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state6_pp0_iter5_stage0 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state8_pp0_iter7_stage0 = ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign grp_fu_242_p1 = ((icmp_ln141_reg_536[0:0] == 1'b1) ? tmp_mid1_fu_415_p4 : tmp_fu_406_p4);

assign icmp_ln138_fu_300_p2 = ((indvar_flatten_fu_92 == zext_ln145_2) ? 1'b1 : 1'b0);

assign icmp_ln141_fu_314_p2 = ((j_4_fu_84 == 7'd64) ? 1'b1 : 1'b0);

assign reg_file_2_0_address0 = zext_ln140_1_fu_349_p1;

assign reg_file_2_0_address1 = zext_ln140_fu_290_p1;

assign reg_file_2_1_address0 = zext_ln140_1_fu_349_p1;

assign reg_file_2_1_address1 = zext_ln140_fu_290_p1;

assign reg_file_3_0_address0 = zext_ln145_fu_438_p1;

assign reg_file_3_1_address0 = zext_ln145_fu_438_p1;

assign reg_file_4_0_address0 = reg_file_4_0_addr_reg_598_pp0_iter6_reg;

assign reg_file_4_0_address1 = zext_ln145_1_fu_460_p1;

assign reg_file_4_0_d0 = grp_fu_236_p2;

assign reg_file_4_1_address0 = reg_file_4_1_addr_reg_604_pp0_iter6_reg;

assign reg_file_4_1_address1 = zext_ln145_1_fu_460_p1;

assign reg_file_4_1_d0 = grp_fu_236_p2;

assign select_ln138_2_fu_359_p3 = ((icmp_ln141_fu_314_p2[0:0] == 1'b1) ? add_ln138_1_fu_328_p2 : k_fu_88);

assign select_ln138_fu_320_p3 = ((icmp_ln141_fu_314_p2[0:0] == 1'b1) ? 7'd0 : j_4_fu_84);

assign trunc_ln140_1_fu_275_p4 = {{k_fu_88[11:1]}};

assign trunc_ln140_1_mid1_fu_334_p4 = {{add_ln138_1_fu_328_p2[11:1]}};

assign trunc_ln140_2_fu_355_p1 = add_ln138_1_fu_328_p2[0:0];

assign trunc_ln140_fu_296_p1 = k_fu_88[0:0];

assign trunc_ln145_1_fu_381_p1 = select_ln138_fu_320_p3[0:0];

assign trunc_ln145_fu_377_p1 = select_ln138_2_fu_359_p3[5:0];

assign zext_ln130_cast_fu_250_p1 = zext_ln130;

assign zext_ln140_1_fu_349_p1 = add_ln140_1_fu_344_p2;

assign zext_ln140_fu_290_p1 = add_ln140_fu_285_p2;

assign zext_ln145_1_fu_460_p1 = add_ln145_1_fu_454_p3;

assign zext_ln145_fu_438_p1 = add_ln1_fu_432_p3;

endmodule //corr_accel_compute_Pipeline_VITIS_LOOP_138_3_VITIS_LOOP_141_4
