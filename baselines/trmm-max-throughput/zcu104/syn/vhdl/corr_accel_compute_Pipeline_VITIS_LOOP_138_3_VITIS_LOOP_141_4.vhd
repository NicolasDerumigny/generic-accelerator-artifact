-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity corr_accel_compute_Pipeline_VITIS_LOOP_138_3_VITIS_LOOP_141_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln130 : IN STD_LOGIC_VECTOR (5 downto 0);
    shl_ln : IN STD_LOGIC_VECTOR (10 downto 0);
    reg_file_2_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_2_0_ce0 : OUT STD_LOGIC;
    reg_file_2_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    reg_file_2_0_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_2_0_ce1 : OUT STD_LOGIC;
    reg_file_2_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    reg_file_2_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_2_1_ce0 : OUT STD_LOGIC;
    reg_file_2_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    reg_file_2_1_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_2_1_ce1 : OUT STD_LOGIC;
    reg_file_2_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    zext_ln145_2 : IN STD_LOGIC_VECTOR (12 downto 0);
    reg_file_0_0_load : IN STD_LOGIC_VECTOR (15 downto 0);
    reg_file_4_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_4_1_ce0 : OUT STD_LOGIC;
    reg_file_4_1_we0 : OUT STD_LOGIC;
    reg_file_4_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    reg_file_4_1_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_4_1_ce1 : OUT STD_LOGIC;
    reg_file_4_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    reg_file_4_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_4_0_ce0 : OUT STD_LOGIC;
    reg_file_4_0_we0 : OUT STD_LOGIC;
    reg_file_4_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    reg_file_4_0_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_4_0_ce1 : OUT STD_LOGIC;
    reg_file_4_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    reg_file_3_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_3_1_ce0 : OUT STD_LOGIC;
    reg_file_3_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    reg_file_3_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_3_0_ce0 : OUT STD_LOGIC;
    reg_file_3_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    tmp_36 : IN STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of corr_accel_compute_Pipeline_VITIS_LOOP_138_3_VITIS_LOOP_141_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln138_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln140_fu_296_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln140_reg_517 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_532 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln141_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln141_reg_536 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln140_2_fu_355_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln140_2_reg_541 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln5_reg_556 : STD_LOGIC_VECTOR (4 downto 0);
    signal lshr_ln5_reg_556_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal lshr_ln5_reg_556_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln145_fu_377_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln145_reg_562 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln145_reg_562_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln145_1_fu_381_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_1_reg_567 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_1_reg_567_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_1_reg_567_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_1_reg_567_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_1_reg_567_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_1_reg_567_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_242_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_mid2_reg_578 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_444_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_file_4_0_addr_reg_598 : STD_LOGIC_VECTOR (10 downto 0);
    signal reg_file_4_0_addr_reg_598_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal reg_file_4_0_addr_reg_598_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal reg_file_4_1_addr_reg_604 : STD_LOGIC_VECTOR (10 downto 0);
    signal reg_file_4_1_addr_reg_604_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal reg_file_4_1_addr_reg_604_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_246_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_reg_610 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_fu_466_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_reg_615 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal zext_ln140_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln140_1_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln145_fu_438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln145_1_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_4_fu_84 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln141_fu_385_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal k_fu_88 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln138_2_fu_359_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln130_cast_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_fu_92 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln138_fu_305_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_236_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_242_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln140_1_fu_275_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln140_fu_285_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln138_1_fu_328_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln140_1_mid1_fu_334_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln140_1_fu_344_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln138_fu_320_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_mid1_fu_415_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_406_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1_fu_432_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln145_1_fu_454_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_87 : BOOLEAN;
    signal ap_enable_state5_pp0_iter4_stage0 : BOOLEAN;
    signal ap_enable_operation_90 : BOOLEAN;
    signal ap_enable_state6_pp0_iter5_stage0 : BOOLEAN;
    signal ap_enable_operation_99 : BOOLEAN;
    signal ap_enable_state8_pp0_iter7_stage0 : BOOLEAN;
    signal ap_enable_operation_88 : BOOLEAN;
    signal ap_enable_operation_91 : BOOLEAN;
    signal ap_enable_operation_101 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component corr_accel_hadd_16ns_16ns_16_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component corr_accel_hmul_16ns_16ns_16_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component corr_accel_mux_21_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component corr_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    hadd_16ns_16ns_16_2_full_dsp_1_U40 : component corr_accel_hadd_16ns_16ns_16_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_35_reg_615,
        din1 => mul_reg_610,
        ce => ap_const_logic_1,
        dout => grp_fu_236_p2);

    hmul_16ns_16ns_16_2_max_dsp_1_U41 : component corr_accel_hmul_16ns_16ns_16_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_file_0_0_load,
        din1 => grp_fu_242_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_242_p2);

    hmul_16ns_16ns_16_2_max_dsp_1_U42 : component corr_accel_hmul_16ns_16ns_16_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_mid2_reg_578,
        din1 => tmp_s_fu_444_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_246_p2);

    mux_21_16_1_1_U43 : component corr_accel_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => reg_file_2_0_q1,
        din1 => reg_file_2_1_q1,
        din2 => trunc_ln140_reg_517,
        dout => tmp_fu_406_p4);

    mux_21_16_1_1_U44 : component corr_accel_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => reg_file_2_0_q0,
        din1 => reg_file_2_1_q0,
        din2 => trunc_ln140_2_reg_541,
        dout => tmp_mid1_fu_415_p4);

    mux_21_16_1_1_U45 : component corr_accel_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => reg_file_3_0_q0,
        din1 => reg_file_3_1_q0,
        din2 => trunc_ln145_1_reg_567_pp0_iter3_reg,
        dout => tmp_s_fu_444_p4);

    mux_21_16_1_1_U46 : component corr_accel_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => reg_file_4_0_q1,
        din1 => reg_file_4_1_q1,
        din2 => trunc_ln145_1_reg_567_pp0_iter4_reg,
        dout => tmp_35_fu_466_p4);

    flow_control_loop_pipe_sequential_init_U : component corr_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_92 <= ap_const_lv13_0;
                elsif (((icmp_ln138_fu_300_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_92 <= add_ln138_fu_305_p2;
                end if;
            end if; 
        end if;
    end process;

    j_4_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_4_fu_84 <= ap_const_lv7_0;
                elsif (((icmp_ln138_fu_300_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_4_fu_84 <= add_ln141_fu_385_p2;
                end if;
            end if; 
        end if;
    end process;

    k_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_88 <= zext_ln130_cast_fu_250_p1;
                elsif (((icmp_ln138_fu_300_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    k_fu_88 <= select_ln138_2_fu_359_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln138_reg_532 <= icmp_ln138_fu_300_p2;
                trunc_ln140_reg_517 <= trunc_ln140_fu_296_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                lshr_ln5_reg_556_pp0_iter2_reg <= lshr_ln5_reg_556;
                lshr_ln5_reg_556_pp0_iter3_reg <= lshr_ln5_reg_556_pp0_iter2_reg;
                mul_reg_610 <= grp_fu_246_p2;
                reg_file_4_0_addr_reg_598 <= zext_ln145_1_fu_460_p1(11 - 1 downto 0);
                reg_file_4_0_addr_reg_598_pp0_iter5_reg <= reg_file_4_0_addr_reg_598;
                reg_file_4_0_addr_reg_598_pp0_iter6_reg <= reg_file_4_0_addr_reg_598_pp0_iter5_reg;
                reg_file_4_1_addr_reg_604 <= zext_ln145_1_fu_460_p1(11 - 1 downto 0);
                reg_file_4_1_addr_reg_604_pp0_iter5_reg <= reg_file_4_1_addr_reg_604;
                reg_file_4_1_addr_reg_604_pp0_iter6_reg <= reg_file_4_1_addr_reg_604_pp0_iter5_reg;
                tmp_1_mid2_reg_578 <= grp_fu_242_p2;
                tmp_35_reg_615 <= tmp_35_fu_466_p4;
                trunc_ln145_1_reg_567_pp0_iter2_reg <= trunc_ln145_1_reg_567;
                trunc_ln145_1_reg_567_pp0_iter3_reg <= trunc_ln145_1_reg_567_pp0_iter2_reg;
                trunc_ln145_1_reg_567_pp0_iter4_reg <= trunc_ln145_1_reg_567_pp0_iter3_reg;
                trunc_ln145_1_reg_567_pp0_iter5_reg <= trunc_ln145_1_reg_567_pp0_iter4_reg;
                trunc_ln145_1_reg_567_pp0_iter6_reg <= trunc_ln145_1_reg_567_pp0_iter5_reg;
                trunc_ln145_reg_562_pp0_iter2_reg <= trunc_ln145_reg_562;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln138_fu_300_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln141_reg_536 <= icmp_ln141_fu_314_p2;
                lshr_ln5_reg_556 <= select_ln138_fu_320_p3(5 downto 1);
                trunc_ln140_2_reg_541 <= trunc_ln140_2_fu_355_p1;
                trunc_ln145_1_reg_567 <= trunc_ln145_1_fu_381_p1;
                trunc_ln145_reg_562 <= trunc_ln145_fu_377_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln138_1_fu_328_p2 <= std_logic_vector(unsigned(k_fu_88) + unsigned(ap_const_lv64_1));
    add_ln138_fu_305_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_92) + unsigned(ap_const_lv13_1));
    add_ln140_1_fu_344_p2 <= std_logic_vector(unsigned(trunc_ln140_1_mid1_fu_334_p4) + unsigned(shl_ln));
    add_ln140_fu_285_p2 <= std_logic_vector(unsigned(trunc_ln140_1_fu_275_p4) + unsigned(shl_ln));
    add_ln141_fu_385_p2 <= std_logic_vector(unsigned(select_ln138_fu_320_p3) + unsigned(ap_const_lv7_1));
    add_ln145_1_fu_454_p3 <= (tmp_36 & lshr_ln5_reg_556_pp0_iter3_reg);
    add_ln1_fu_432_p3 <= (trunc_ln145_reg_562_pp0_iter2_reg & lshr_ln5_reg_556_pp0_iter2_reg);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln138_fu_300_p2)
    begin
        if (((icmp_ln138_fu_300_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, icmp_ln138_reg_532)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln138_reg_532 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_101_assign_proc : process(trunc_ln145_1_reg_567_pp0_iter6_reg)
    begin
                ap_enable_operation_101 <= (trunc_ln145_1_reg_567_pp0_iter6_reg = ap_const_lv1_1);
    end process;

        ap_enable_operation_87 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_88 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_90 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_91 <= (ap_const_boolean_1 = ap_const_boolean_1);

    ap_enable_operation_99_assign_proc : process(trunc_ln145_1_reg_567_pp0_iter6_reg)
    begin
                ap_enable_operation_99 <= (trunc_ln145_1_reg_567_pp0_iter6_reg = ap_const_lv1_0);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_enable_state5_pp0_iter4_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4)
    begin
                ap_enable_state5_pp0_iter4_stage0 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state6_pp0_iter5_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5)
    begin
                ap_enable_state6_pp0_iter5_stage0 <= ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state8_pp0_iter7_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7)
    begin
                ap_enable_state8_pp0_iter7_stage0 <= ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_242_p1 <= 
        tmp_mid1_fu_415_p4 when (icmp_ln141_reg_536(0) = '1') else 
        tmp_fu_406_p4;
    icmp_ln138_fu_300_p2 <= "1" when (indvar_flatten_fu_92 = zext_ln145_2) else "0";
    icmp_ln141_fu_314_p2 <= "1" when (j_4_fu_84 = ap_const_lv7_40) else "0";
    reg_file_2_0_address0 <= zext_ln140_1_fu_349_p1(11 - 1 downto 0);
    reg_file_2_0_address1 <= zext_ln140_fu_290_p1(11 - 1 downto 0);

    reg_file_2_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            reg_file_2_0_ce0 <= ap_const_logic_1;
        else 
            reg_file_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    reg_file_2_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            reg_file_2_0_ce1 <= ap_const_logic_1;
        else 
            reg_file_2_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    reg_file_2_1_address0 <= zext_ln140_1_fu_349_p1(11 - 1 downto 0);
    reg_file_2_1_address1 <= zext_ln140_fu_290_p1(11 - 1 downto 0);

    reg_file_2_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            reg_file_2_1_ce0 <= ap_const_logic_1;
        else 
            reg_file_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    reg_file_2_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            reg_file_2_1_ce1 <= ap_const_logic_1;
        else 
            reg_file_2_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    reg_file_3_0_address0 <= zext_ln145_fu_438_p1(11 - 1 downto 0);

    reg_file_3_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            reg_file_3_0_ce0 <= ap_const_logic_1;
        else 
            reg_file_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    reg_file_3_1_address0 <= zext_ln145_fu_438_p1(11 - 1 downto 0);

    reg_file_3_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            reg_file_3_1_ce0 <= ap_const_logic_1;
        else 
            reg_file_3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    reg_file_4_0_address0 <= reg_file_4_0_addr_reg_598_pp0_iter6_reg;
    reg_file_4_0_address1 <= zext_ln145_1_fu_460_p1(11 - 1 downto 0);

    reg_file_4_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            reg_file_4_0_ce0 <= ap_const_logic_1;
        else 
            reg_file_4_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    reg_file_4_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            reg_file_4_0_ce1 <= ap_const_logic_1;
        else 
            reg_file_4_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    reg_file_4_0_d0 <= grp_fu_236_p2;

    reg_file_4_0_we0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001, trunc_ln145_1_reg_567_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (trunc_ln145_1_reg_567_pp0_iter6_reg = ap_const_lv1_0))) then 
            reg_file_4_0_we0 <= ap_const_logic_1;
        else 
            reg_file_4_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    reg_file_4_1_address0 <= reg_file_4_1_addr_reg_604_pp0_iter6_reg;
    reg_file_4_1_address1 <= zext_ln145_1_fu_460_p1(11 - 1 downto 0);

    reg_file_4_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            reg_file_4_1_ce0 <= ap_const_logic_1;
        else 
            reg_file_4_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    reg_file_4_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            reg_file_4_1_ce1 <= ap_const_logic_1;
        else 
            reg_file_4_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    reg_file_4_1_d0 <= grp_fu_236_p2;

    reg_file_4_1_we0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001, trunc_ln145_1_reg_567_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (trunc_ln145_1_reg_567_pp0_iter6_reg = ap_const_lv1_1))) then 
            reg_file_4_1_we0 <= ap_const_logic_1;
        else 
            reg_file_4_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln138_2_fu_359_p3 <= 
        add_ln138_1_fu_328_p2 when (icmp_ln141_fu_314_p2(0) = '1') else 
        k_fu_88;
    select_ln138_fu_320_p3 <= 
        ap_const_lv7_0 when (icmp_ln141_fu_314_p2(0) = '1') else 
        j_4_fu_84;
    trunc_ln140_1_fu_275_p4 <= k_fu_88(11 downto 1);
    trunc_ln140_1_mid1_fu_334_p4 <= add_ln138_1_fu_328_p2(11 downto 1);
    trunc_ln140_2_fu_355_p1 <= add_ln138_1_fu_328_p2(1 - 1 downto 0);
    trunc_ln140_fu_296_p1 <= k_fu_88(1 - 1 downto 0);
    trunc_ln145_1_fu_381_p1 <= select_ln138_fu_320_p3(1 - 1 downto 0);
    trunc_ln145_fu_377_p1 <= select_ln138_2_fu_359_p3(6 - 1 downto 0);
    zext_ln130_cast_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln130),64));
    zext_ln140_1_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln140_1_fu_344_p2),64));
    zext_ln140_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln140_fu_285_p2),64));
    zext_ln145_1_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln145_1_fu_454_p3),64));
    zext_ln145_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1_fu_432_p3),64));
end behav;
