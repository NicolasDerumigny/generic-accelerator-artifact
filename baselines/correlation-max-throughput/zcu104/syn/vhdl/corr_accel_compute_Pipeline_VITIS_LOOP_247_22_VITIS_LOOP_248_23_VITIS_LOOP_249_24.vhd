-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity corr_accel_compute_Pipeline_VITIS_LOOP_247_22_VITIS_LOOP_248_23_VITIS_LOOP_249_24 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    reg_file_6_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_6_0_ce0 : OUT STD_LOGIC;
    reg_file_6_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    reg_file_6_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_6_1_ce0 : OUT STD_LOGIC;
    reg_file_6_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    reg_file_3_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_3_1_ce0 : OUT STD_LOGIC;
    reg_file_3_1_we0 : OUT STD_LOGIC;
    reg_file_3_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    reg_file_3_1_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_3_1_ce1 : OUT STD_LOGIC;
    reg_file_3_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    reg_file_3_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_3_0_ce0 : OUT STD_LOGIC;
    reg_file_3_0_we0 : OUT STD_LOGIC;
    reg_file_3_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    reg_file_3_0_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_3_0_ce1 : OUT STD_LOGIC;
    reg_file_3_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    reg_file_2_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_2_1_ce0 : OUT STD_LOGIC;
    reg_file_2_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    reg_file_2_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    reg_file_2_0_ce0 : OUT STD_LOGIC;
    reg_file_2_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_284_p_din0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_284_p_din1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_284_p_dout0 : IN STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_284_p_ce : OUT STD_LOGIC;
    grp_fu_288_p_din0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_288_p_din1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_288_p_dout0 : IN STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_288_p_ce : OUT STD_LOGIC;
    grp_fu_300_p_din0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_300_p_din1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_300_p_dout0 : IN STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_300_p_ce : OUT STD_LOGIC;
    grp_fu_304_p_din0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_304_p_din1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_304_p_dout0 : IN STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_304_p_ce : OUT STD_LOGIC );
end;


architecture behav of corr_accel_compute_Pipeline_VITIS_LOOP_247_22_VITIS_LOOP_248_23_VITIS_LOOP_249_24 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv18_20000 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv13_800 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln247_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvars_iv114_udiv_reg_676 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_42_fu_279_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_42_reg_681 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_42_reg_681_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln247_reg_687 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln247_reg_687_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln248_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln248_reg_691 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln248_reg_691_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_329_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_699 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln247_1_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln247_1_reg_703 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln247_1_reg_703_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln248_1_fu_369_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln248_1_reg_709 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln248_1_reg_709_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln248_1_reg_709_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv114_udiv_mid1_reg_715 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_46_fu_387_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_46_reg_720 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_46_reg_720_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln_reg_726 : STD_LOGIC_VECTOR (4 downto 0);
    signal lshr_ln_reg_726_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_19_reg_732 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_dup_fu_517_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_dup_reg_752 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln247_4_fu_527_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln247_4_reg_757 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln248_2_fu_605_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_file_3_0_addr_reg_788 : STD_LOGIC_VECTOR (10 downto 0);
    signal reg_file_3_0_addr_reg_788_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal reg_file_3_0_addr_reg_788_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal reg_file_3_1_addr_reg_799 : STD_LOGIC_VECTOR (10 downto 0);
    signal reg_file_3_1_addr_reg_799_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal reg_file_3_1_addr_reg_799_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_fu_627_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_reg_810 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul2_reg_815 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_2_fu_634_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_2_reg_820 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul259_1_reg_825 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_exit_pp0_iter3_stage0 : STD_LOGIC;
    signal p_cast_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_cast_mid181_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_mid1_fu_543_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln259_fu_569_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln253_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_82 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln249_fu_419_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_86 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln248_3_fu_391_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten50_fu_90 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln248_5_fu_431_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_fu_94 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln247_3_fu_510_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten95_fu_98 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln247_fu_289_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal cmp250_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln249_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln247_fu_307_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln247_1_fu_315_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln248_fu_349_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln247_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp250_mid1_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln248_fu_355_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln248_1_fu_425_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_41_fu_466_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_fu_470_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln247_1_fu_483_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_45_fu_493_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_mid_fu_497_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_44_fu_489_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_462_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_mid1_fu_534_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln247_5_fu_549_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln248_4_fu_555_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln9_fu_561_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_580_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln247_2_fu_589_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_69_mid1_fu_596_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln8_fu_614_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_predicate_op105_load_state4 : BOOLEAN;
    signal ap_enable_operation_105 : BOOLEAN;
    signal ap_enable_state4_pp0_iter3_stage0 : BOOLEAN;
    signal ap_enable_operation_112 : BOOLEAN;
    signal ap_enable_state5_pp0_iter4_stage0 : BOOLEAN;
    signal ap_enable_operation_126 : BOOLEAN;
    signal ap_enable_state7_pp0_iter6_stage0 : BOOLEAN;
    signal ap_predicate_op109_load_state4 : BOOLEAN;
    signal ap_enable_operation_109 : BOOLEAN;
    signal ap_enable_operation_115 : BOOLEAN;
    signal ap_enable_operation_128 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_619 : BOOLEAN;
    signal ap_condition_625 : BOOLEAN;
    signal ap_condition_243 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component corr_accel_hadd_16ns_16ns_16_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component corr_accel_hmul_16ns_16ns_16_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component corr_accel_mux_21_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component corr_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_21_16_1_1_U115 : component corr_accel_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => reg_file_6_0_q0,
        din1 => reg_file_6_1_q0,
        din2 => empty_42_reg_681_pp0_iter2_reg,
        dout => tmp_s_fu_580_p4);

    mux_21_16_1_1_U116 : component corr_accel_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => reg_file_6_0_q0,
        din1 => reg_file_6_1_q0,
        din2 => empty_46_reg_720_pp0_iter2_reg,
        dout => tmp_69_mid1_fu_596_p4);

    flow_control_loop_pipe_sequential_init_U : component corr_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    i_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    i_fu_94 <= ap_const_lv7_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln247_reg_687 = ap_const_lv1_0))) then 
                    i_fu_94 <= select_ln247_3_fu_510_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten50_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten50_fu_90 <= ap_const_lv13_0;
                elsif (((icmp_ln247_fu_283_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten50_fu_90 <= select_ln248_5_fu_431_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten95_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten95_fu_98 <= ap_const_lv18_0;
                elsif (((icmp_ln247_fu_283_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten95_fu_98 <= add_ln247_fu_289_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_86 <= ap_const_lv7_0;
                elsif (((icmp_ln247_fu_283_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_86 <= select_ln248_3_fu_391_p3;
                end if;
            end if; 
        end if;
    end process;

    k_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_82 <= ap_const_lv7_0;
                elsif (((icmp_ln247_fu_283_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    k_fu_82 <= add_ln249_fu_419_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                empty_42_reg_681 <= empty_42_fu_279_p1;
                icmp_ln247_reg_687 <= icmp_ln247_fu_283_p2;
                indvars_iv114_udiv_reg_676 <= j_fu_86(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                empty_42_reg_681_pp0_iter2_reg <= empty_42_reg_681;
                empty_46_reg_720_pp0_iter2_reg <= empty_46_reg_720;
                icmp_ln247_reg_687_pp0_iter2_reg <= icmp_ln247_reg_687;
                icmp_ln248_reg_691_pp0_iter2_reg <= icmp_ln248_reg_691;
                lshr_ln_reg_726_pp0_iter2_reg <= lshr_ln_reg_726;
                mul259_1_reg_825 <= grp_fu_304_p_dout0;
                mul2_reg_815 <= grp_fu_300_p_dout0;
                or_ln247_1_reg_703_pp0_iter2_reg <= or_ln247_1_reg_703;
                reg_file_3_0_addr_reg_788_pp0_iter4_reg <= reg_file_3_0_addr_reg_788;
                reg_file_3_0_addr_reg_788_pp0_iter5_reg <= reg_file_3_0_addr_reg_788_pp0_iter4_reg;
                reg_file_3_1_addr_reg_799_pp0_iter4_reg <= reg_file_3_1_addr_reg_799;
                reg_file_3_1_addr_reg_799_pp0_iter5_reg <= reg_file_3_1_addr_reg_799_pp0_iter4_reg;
                ret_2_reg_820 <= ret_2_fu_634_p3;
                ret_reg_810 <= ret_fu_627_p3;
                select_ln248_1_reg_709_pp0_iter2_reg <= select_ln248_1_reg_709;
                select_ln248_1_reg_709_pp0_iter3_reg <= select_ln248_1_reg_709_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln247_fu_283_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_46_reg_720 <= empty_46_fu_387_p1;
                icmp_ln248_reg_691 <= icmp_ln248_fu_301_p2;
                indvars_iv114_udiv_mid1_reg_715 <= add_ln248_fu_349_p2(5 downto 1);
                lshr_ln_reg_726 <= select_ln248_fu_355_p3(5 downto 1);
                or_ln247_1_reg_703 <= or_ln247_1_fu_343_p2;
                select_ln248_1_reg_709 <= select_ln248_1_fu_369_p3;
                tmp_19_reg_732 <= select_ln248_3_fu_391_p3(5 downto 1);
                tmp_reg_699 <= k_fu_82(6 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln247_reg_687_pp0_iter2_reg = ap_const_lv1_0))) then
                reg_file_3_0_addr_reg_788 <= zext_ln253_fu_621_p1(11 - 1 downto 0);
                reg_file_3_1_addr_reg_799 <= zext_ln253_fu_621_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln247_reg_687 = ap_const_lv1_0))) then
                select_ln247_4_reg_757 <= select_ln247_4_fu_527_p3;
                tmp_16_dup_reg_752 <= select_ln247_3_fu_510_p3(5 downto 1);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln247_1_fu_483_p2 <= std_logic_vector(unsigned(i_fu_94) + unsigned(ap_const_lv7_1));
    add_ln247_fu_289_p2 <= std_logic_vector(unsigned(indvar_flatten95_fu_98) + unsigned(ap_const_lv18_1));
    add_ln248_1_fu_425_p2 <= std_logic_vector(unsigned(indvar_flatten50_fu_90) + unsigned(ap_const_lv13_1));
    add_ln248_fu_349_p2 <= std_logic_vector(unsigned(select_ln247_fu_307_p3) + unsigned(ap_const_lv7_1));
    add_ln249_fu_419_p2 <= std_logic_vector(unsigned(select_ln248_fu_355_p3) + unsigned(ap_const_lv7_2));
    add_ln8_fu_614_p4 <= ((tmp_16_dup_reg_752 & select_ln247_4_reg_757) & lshr_ln_reg_726_pp0_iter2_reg);
    add_ln9_fu_561_p4 <= ((tmp_19_reg_732 & select_ln248_4_fu_555_p3) & lshr_ln_reg_726);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_243_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln247_reg_687, ap_block_pp0_stage0)
    begin
                ap_condition_243 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln247_reg_687 = ap_const_lv1_0));
    end process;


    ap_condition_619_assign_proc : process(empty_42_reg_681, icmp_ln248_reg_691, tmp_reg_699, or_ln247_1_reg_703)
    begin
                ap_condition_619 <= ((or_ln247_1_reg_703 = ap_const_lv1_1) and (tmp_reg_699 = ap_const_lv1_0) and (icmp_ln248_reg_691 = ap_const_lv1_0) and (empty_42_reg_681 = ap_const_lv1_0));
    end process;


    ap_condition_625_assign_proc : process(icmp_ln248_reg_691, tmp_reg_699, or_ln247_1_reg_703, empty_46_reg_720)
    begin
                ap_condition_625 <= ((empty_46_reg_720 = ap_const_lv1_0) and (or_ln247_1_reg_703 = ap_const_lv1_0) and (tmp_reg_699 = ap_const_lv1_1) and (icmp_ln248_reg_691 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln247_fu_283_p2)
    begin
        if (((icmp_ln247_fu_283_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, icmp_ln247_reg_687_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln247_reg_687_pp0_iter2_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_105_assign_proc : process(ap_predicate_op105_load_state4)
    begin
                ap_enable_operation_105 <= (ap_predicate_op105_load_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_109_assign_proc : process(ap_predicate_op109_load_state4)
    begin
                ap_enable_operation_109 <= (ap_predicate_op109_load_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_112_assign_proc : process(select_ln248_1_reg_709_pp0_iter3_reg)
    begin
                ap_enable_operation_112 <= (select_ln248_1_reg_709_pp0_iter3_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_115_assign_proc : process(select_ln248_1_reg_709_pp0_iter3_reg)
    begin
                ap_enable_operation_115 <= (select_ln248_1_reg_709_pp0_iter3_reg = ap_const_lv1_0);
    end process;

        ap_enable_operation_126 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_128 <= (ap_const_boolean_1 = ap_const_boolean_1);
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_enable_state4_pp0_iter3_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3)
    begin
                ap_enable_state4_pp0_iter3_stage0 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state5_pp0_iter4_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4)
    begin
                ap_enable_state5_pp0_iter4_stage0 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state7_pp0_iter6_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6)
    begin
                ap_enable_state7_pp0_iter6_stage0 <= ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_predicate_op105_load_state4_assign_proc : process(icmp_ln247_reg_687_pp0_iter2_reg, select_ln248_1_reg_709_pp0_iter2_reg)
    begin
                ap_predicate_op105_load_state4 <= ((select_ln248_1_reg_709_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln247_reg_687_pp0_iter2_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op109_load_state4_assign_proc : process(icmp_ln247_reg_687_pp0_iter2_reg, select_ln248_1_reg_709_pp0_iter2_reg)
    begin
                ap_predicate_op109_load_state4 <= ((select_ln248_1_reg_709_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln247_reg_687_pp0_iter2_reg = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    cmp250_fu_263_p2 <= "1" when (j_fu_86 = ap_const_lv7_0) else "0";
    cmp250_mid1_fu_363_p2 <= "1" when (add_ln248_fu_349_p2 = ap_const_lv7_0) else "0";
    empty_41_fu_466_p1 <= i_fu_94(6 - 1 downto 0);
    empty_42_fu_279_p1 <= j_fu_86(1 - 1 downto 0);
    empty_44_fu_489_p1 <= add_ln247_1_fu_483_p2(1 - 1 downto 0);
    empty_45_fu_493_p1 <= add_ln247_1_fu_483_p2(6 - 1 downto 0);
    empty_46_fu_387_p1 <= add_ln248_fu_349_p2(1 - 1 downto 0);
    empty_fu_462_p1 <= i_fu_94(1 - 1 downto 0);
    grp_fu_284_p_ce <= ap_const_logic_1;
    grp_fu_284_p_din0 <= ret_reg_810;
    grp_fu_284_p_din1 <= mul2_reg_815;
    grp_fu_288_p_ce <= ap_const_logic_1;
    grp_fu_288_p_din0 <= ret_2_reg_820;
    grp_fu_288_p_din1 <= mul259_1_reg_825;
    grp_fu_300_p_ce <= ap_const_logic_1;
    grp_fu_300_p_din0 <= select_ln248_2_fu_605_p3;
    grp_fu_300_p_din1 <= reg_file_2_0_q0;
    grp_fu_304_p_ce <= ap_const_logic_1;
    grp_fu_304_p_din0 <= select_ln248_2_fu_605_p3;
    grp_fu_304_p_din1 <= reg_file_2_1_q0;
    icmp_ln247_fu_283_p2 <= "1" when (indvar_flatten95_fu_98 = ap_const_lv18_20000) else "0";
    icmp_ln248_fu_301_p2 <= "1" when (indvar_flatten50_fu_90 = ap_const_lv13_800) else "0";
    or_ln247_1_fu_343_p2 <= (xor_ln249_fu_337_p2 or icmp_ln248_fu_301_p2);
    or_ln247_fu_323_p2 <= (icmp_ln248_fu_301_p2 or cmp250_fu_263_p2);
    p_cast_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_470_p3),64));
    p_cast_mid181_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_mid_fu_497_p3),64));
    p_cast_mid1_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_mid1_fu_534_p4),64));
    reg_file_2_0_address0 <= zext_ln259_fu_569_p1(11 - 1 downto 0);

    reg_file_2_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            reg_file_2_0_ce0 <= ap_const_logic_1;
        else 
            reg_file_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    reg_file_2_1_address0 <= zext_ln259_fu_569_p1(11 - 1 downto 0);

    reg_file_2_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            reg_file_2_1_ce0 <= ap_const_logic_1;
        else 
            reg_file_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    reg_file_3_0_address0 <= reg_file_3_0_addr_reg_788_pp0_iter5_reg;
    reg_file_3_0_address1 <= zext_ln253_fu_621_p1(11 - 1 downto 0);

    reg_file_3_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            reg_file_3_0_ce0 <= ap_const_logic_1;
        else 
            reg_file_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    reg_file_3_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            reg_file_3_0_ce1 <= ap_const_logic_1;
        else 
            reg_file_3_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    reg_file_3_0_d0 <= grp_fu_284_p_dout0;

    reg_file_3_0_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            reg_file_3_0_we0 <= ap_const_logic_1;
        else 
            reg_file_3_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    reg_file_3_1_address0 <= reg_file_3_1_addr_reg_799_pp0_iter5_reg;
    reg_file_3_1_address1 <= zext_ln253_fu_621_p1(11 - 1 downto 0);

    reg_file_3_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            reg_file_3_1_ce0 <= ap_const_logic_1;
        else 
            reg_file_3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    reg_file_3_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            reg_file_3_1_ce1 <= ap_const_logic_1;
        else 
            reg_file_3_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    reg_file_3_1_d0 <= grp_fu_288_p_dout0;

    reg_file_3_1_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            reg_file_3_1_we0 <= ap_const_logic_1;
        else 
            reg_file_3_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    reg_file_6_0_address0_assign_proc : process(icmp_ln248_reg_691, or_ln247_1_reg_703, p_cast_fu_477_p1, p_cast_mid181_fu_505_p1, p_cast_mid1_fu_543_p1, ap_condition_619, ap_condition_625, ap_condition_243)
    begin
        if ((ap_const_boolean_1 = ap_condition_243)) then
            if ((ap_const_boolean_1 = ap_condition_625)) then 
                reg_file_6_0_address0 <= p_cast_mid1_fu_543_p1(11 - 1 downto 0);
            elsif (((or_ln247_1_reg_703 = ap_const_lv1_1) and (icmp_ln248_reg_691 = ap_const_lv1_1))) then 
                reg_file_6_0_address0 <= p_cast_mid181_fu_505_p1(11 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_619)) then 
                reg_file_6_0_address0 <= p_cast_fu_477_p1(11 - 1 downto 0);
            else 
                reg_file_6_0_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            reg_file_6_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    reg_file_6_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_42_reg_681, icmp_ln247_reg_687, icmp_ln248_reg_691, tmp_reg_699, or_ln247_1_reg_703, empty_46_reg_720)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (empty_46_reg_720 = ap_const_lv1_0) and (or_ln247_1_reg_703 = ap_const_lv1_0) and (tmp_reg_699 = ap_const_lv1_1) and (icmp_ln248_reg_691 = ap_const_lv1_0) and (icmp_ln247_reg_687 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_ln247_1_reg_703 = ap_const_lv1_1) and (tmp_reg_699 = ap_const_lv1_0) and (icmp_ln248_reg_691 = ap_const_lv1_0) and (icmp_ln247_reg_687 = ap_const_lv1_0) and (empty_42_reg_681 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_ln247_1_reg_703 = ap_const_lv1_1) and (icmp_ln248_reg_691 = ap_const_lv1_1) and (icmp_ln247_reg_687 = ap_const_lv1_0)))) then 
            reg_file_6_0_ce0 <= ap_const_logic_1;
        else 
            reg_file_6_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    reg_file_6_1_address0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln247_reg_687, icmp_ln248_reg_691, or_ln247_1_reg_703, p_cast_fu_477_p1, ap_block_pp0_stage0, p_cast_mid1_fu_543_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
            if (((or_ln247_1_reg_703 = ap_const_lv1_0) and (icmp_ln247_reg_687 = ap_const_lv1_0))) then 
                reg_file_6_1_address0 <= p_cast_mid1_fu_543_p1(11 - 1 downto 0);
            elsif (((or_ln247_1_reg_703 = ap_const_lv1_1) and (icmp_ln248_reg_691 = ap_const_lv1_0))) then 
                reg_file_6_1_address0 <= p_cast_fu_477_p1(11 - 1 downto 0);
            else 
                reg_file_6_1_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            reg_file_6_1_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    reg_file_6_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln247_reg_687, icmp_ln248_reg_691, or_ln247_1_reg_703)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_ln247_1_reg_703 = ap_const_lv1_0) and (icmp_ln247_reg_687 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_ln247_1_reg_703 = ap_const_lv1_1) and (icmp_ln248_reg_691 = ap_const_lv1_0)))) then 
            reg_file_6_1_ce0 <= ap_const_logic_1;
        else 
            reg_file_6_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_2_fu_634_p3 <= 
        ap_const_lv16_0 when (select_ln248_1_reg_709_pp0_iter3_reg(0) = '1') else 
        reg_file_3_1_q1;
    ret_fu_627_p3 <= 
        ap_const_lv16_0 when (select_ln248_1_reg_709_pp0_iter3_reg(0) = '1') else 
        reg_file_3_0_q1;
    select_ln247_1_fu_315_p3 <= 
        ap_const_lv7_0 when (icmp_ln248_fu_301_p2(0) = '1') else 
        k_fu_82;
    select_ln247_2_fu_589_p3 <= 
        reg_file_6_0_q0 when (icmp_ln248_reg_691_pp0_iter2_reg(0) = '1') else 
        tmp_s_fu_580_p4;
    select_ln247_3_fu_510_p3 <= 
        add_ln247_1_fu_483_p2 when (icmp_ln248_reg_691(0) = '1') else 
        i_fu_94;
    select_ln247_4_fu_527_p3 <= 
        empty_44_fu_489_p1 when (icmp_ln248_reg_691(0) = '1') else 
        empty_fu_462_p1;
    select_ln247_5_fu_549_p3 <= 
        ap_const_lv1_0 when (icmp_ln248_reg_691(0) = '1') else 
        empty_42_reg_681;
    select_ln247_fu_307_p3 <= 
        ap_const_lv7_0 when (icmp_ln248_fu_301_p2(0) = '1') else 
        j_fu_86;
    select_ln248_1_fu_369_p3 <= 
        or_ln247_fu_323_p2 when (or_ln247_1_fu_343_p2(0) = '1') else 
        cmp250_mid1_fu_363_p2;
    select_ln248_2_fu_605_p3 <= 
        select_ln247_2_fu_589_p3 when (or_ln247_1_reg_703_pp0_iter2_reg(0) = '1') else 
        tmp_69_mid1_fu_596_p4;
    select_ln248_3_fu_391_p3 <= 
        select_ln247_fu_307_p3 when (or_ln247_1_fu_343_p2(0) = '1') else 
        add_ln248_fu_349_p2;
    select_ln248_4_fu_555_p3 <= 
        select_ln247_5_fu_549_p3 when (or_ln247_1_reg_703(0) = '1') else 
        empty_46_reg_720;
    select_ln248_5_fu_431_p3 <= 
        ap_const_lv13_1 when (icmp_ln248_fu_301_p2(0) = '1') else 
        add_ln248_1_fu_425_p2;
    select_ln248_fu_355_p3 <= 
        select_ln247_1_fu_315_p3 when (or_ln247_1_fu_343_p2(0) = '1') else 
        ap_const_lv7_0;
    tmp_16_dup_fu_517_p4 <= select_ln247_3_fu_510_p3(5 downto 1);
    tmp_17_fu_470_p3 <= (empty_41_fu_466_p1 & indvars_iv114_udiv_reg_676);
    tmp_17_mid1_fu_534_p4 <= ((tmp_16_dup_fu_517_p4 & select_ln247_4_fu_527_p3) & indvars_iv114_udiv_mid1_reg_715);
    tmp_17_mid_fu_497_p3 <= (empty_45_fu_493_p1 & ap_const_lv5_0);
    tmp_fu_329_p3 <= k_fu_82(6 downto 6);
    xor_ln249_fu_337_p2 <= (tmp_fu_329_p3 xor ap_const_lv1_1);
    zext_ln253_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln8_fu_614_p4),64));
    zext_ln259_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_fu_561_p4),64));
end behav;
